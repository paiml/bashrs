# Bashrs (Rash) Implementation Roadmap
# EXTREME TDD with Zero Tolerance Quality Gates
# Inspired by paiml-mcp-agent-toolkit standards

meta:
  project: Bashrs (Rash) - Bidirectional Shell Safety Tool
  description: |
    PRIMARY: Rust → Safe Shell (production-ready)
    SECONDARY: Bash → Rust → Purified Bash (for legacy cleanup)
  approach: Extreme Test-Driven Development
  quality_gates:
    max_complexity: 10
    max_cognitive: 15
    min_coverage: 0.85
    min_mutation_score: 0.90
    satd_tolerance: 0
    min_property_tests: 50
  execution:
    ticket_workflow: RED-GREEN-REFACTOR
    commit_strategy: atomic_per_ticket
    build_verification: mandatory_clean
  critical_invariants:
    - "POSIX compliance: shellcheck -s sh must pass"
    - "Determinism: byte-identical output for same input"
    - "Safety: no injection vulnerabilities in generated code"
    - "Performance: <100ms for minimal scripts"
    - "Code size: <20 lines shell boilerplate"

sprints:
  # SPRINT 25: COMPLETED - Test Generator & Integration Testing
  - id: sprint-25
    name: "Test Generator & Integration Testing"
    status: "✅ COMPLETE"
    goal: "Implement automatic test generation and integration testing"
    duration: 2_weeks
    completion_date: "2025-10-10"
    achievements:
      - "Test generator module fully implemented"
      - "4 integration tests covering end-to-end workflows"
      - "Doctest extraction and unit test generation working"
      - "756/756 tests passing (100%)"
      - "v1.0.0 stable release"
    tickets_completed:
      - "Test generator core implementation"
      - "Integration test framework"
      - "Bug fixes (doctest extraction, Rust code generation)"

  # SPRINT 26: Mutation Testing Full Coverage (Week 1-2)
  - id: sprint-26
    name: "Mutation Testing Excellence"
    goal: "Achieve ≥90% mutation kill rate across core modules"
    duration: 2_weeks
    tickets:
      - id: RASH-2601
        title: "Run full mutation analysis on parser"
        priority: critical
        requirements:
          - "Execute cargo-mutants on src/parser/"
          - "Identify all surviving mutants"
          - "Analyze gaps in test coverage"
          - "Document mutation testing baseline"
        tests:
          - "test_parser_mutation_baseline_established"
          - "test_all_parser_mutants_cataloged"
          - "test_kill_rate_measured_accurately"
        acceptance:
          - "Baseline kill rate documented"
          - "All surviving mutants analyzed"
          - "Gap analysis complete"

      - id: RASH-2602
        title: "Close parser mutation gaps"
        priority: critical
        requirements:
          - "Add tests for surviving mutants"
          - "Use property tests where applicable"
          - "Target ≥90% kill rate"
        tests:
          - "test_parser_mutation_kill_rate_improved"
          - "proptest_parser_edge_cases_covered"
          - "test_no_trivial_mutants_survive"
        acceptance:
          - "≥90% mutation kill rate"
          - "All critical mutants killed"
          - "Property tests added for patterns"

      - id: RASH-2603
        title: "IR module mutation coverage"
        priority: high
        requirements:
          - "Run cargo-mutants on src/ir/"
          - "Current: ~83% baseline (from Sprint 24)"
          - "Close gaps to reach ≥90%"
        tests:
          - "test_ir_mutation_coverage_complete"
          - "test_ir_conversion_mutants_killed"
          - "proptest_ir_transformations_verified"
        acceptance:
          - "≥90% mutation kill rate on IR"
          - "All IR conversions tested"
          - "Documentation updated"

      - id: RASH-2604
        title: "Emitter module mutation coverage"
        priority: high
        requirements:
          - "Run cargo-mutants on src/emitter/"
          - "Shell code generation must be verified"
          - "Target ≥90% kill rate"
        tests:
          - "test_emitter_mutation_coverage"
          - "test_shell_output_mutations_detected"
          - "proptest_emitter_determinism"
        acceptance:
          - "≥90% mutation kill rate"
          - "All shell emission tested"
          - "Output validation complete"

      - id: RASH-2605
        title: "Verifier module mutation coverage"
        priority: medium
        requirements:
          - "Run cargo-mutants on src/verifier/"
          - "Verification logic must be sound"
          - "Target ≥90% kill rate"
        tests:
          - "test_verifier_mutation_complete"
          - "test_verification_rules_tested"
          - "proptest_verifier_correctness"
        acceptance:
          - "≥90% mutation kill rate"
          - "All verification paths tested"
          - "False positive/negative tests added"

  # SPRINT 27: Advanced Standard Library (Week 3-4)
  - id: sprint-27
    name: "Standard Library Expansion"
    goal: "Expand stdlib to 20+ functions with full testing"
    duration: 2_weeks
    tickets:
      - id: RASH-2701
        title: "String manipulation functions"
        priority: high
        requirements:
          - "Add: split, join, replace, substring"
          - "Add: to_upper, to_lower, capitalize"
          - "Add: starts_with, ends_with"
        tests:
          - "test_string_split_functionality"
          - "test_string_join_operations"
          - "test_string_case_conversions"
          - "proptest_string_operations_correct"
        acceptance:
          - "8 string functions implemented"
          - "100% test coverage on new functions"
          - "Property tests for all operations"

      - id: RASH-2702
        title: "Array/List operations"
        priority: high
        requirements:
          - "Add: push, pop, shift, unshift"
          - "Add: map, filter, reduce"
          - "Add: sort, reverse, unique"
        tests:
          - "test_array_mutations"
          - "test_array_transformations"
          - "test_array_aggregations"
          - "proptest_array_operations_preserve_types"
        acceptance:
          - "10 array functions implemented"
          - "Functional programming patterns supported"
          - "Performance benchmarks documented"

      - id: RASH-2703
        title: "File system utilities"
        priority: medium
        requirements:
          - "Add: copy, move, delete"
          - "Add: mkdir, rmdir, list_dir"
          - "Add: file_size, file_type"
        tests:
          - "test_fs_operations_safe"
          - "test_fs_error_handling"
          - "test_fs_path_validation"
          - "proptest_fs_operations_idempotent"
        acceptance:
          - "8 filesystem functions"
          - "Error handling comprehensive"
          - "Shell safety verified"

      - id: RASH-2704
        title: "Advanced error handling"
        priority: high
        requirements:
          - "Result type support"
          - "Option type support"
          - "Error propagation with ?"
          - "Custom error types"
        tests:
          - "test_result_type_transpilation"
          - "test_option_type_handling"
          - "test_error_propagation"
          - "proptest_error_handling_correct"
        acceptance:
          - "Result/Option fully supported"
          - "Error propagation works"
          - "Shell exit codes correct"

  # SPRINT 28: SMT Verification Foundation (Week 5-6)
  - id: sprint-28
    name: "Formal Verification Foundation"
    goal: "Add SMT solver integration for correctness proofs"
    duration: 2_weeks
    tickets:
      - id: RASH-2801
        title: "Z3 integration setup"
        priority: critical
        requirements:
          - "Add z3 crate dependency"
          - "SMT formula generation from IR"
          - "Basic constraint solving"
        tests:
          - "test_z3_integration_works"
          - "test_smt_formula_generation"
          - "test_constraint_solving_basic"
        acceptance:
          - "Z3 integrated successfully"
          - "Formula generation working"
          - "Basic proofs verified"

      - id: RASH-2802
        title: "Safety property verification"
        priority: critical
        requirements:
          - "Verify no command injection"
          - "Verify proper escaping"
          - "Verify variable safety"
        tests:
          - "test_injection_prevention_verified"
          - "test_escaping_correctness_proven"
          - "test_variable_safety_checked"
        acceptance:
          - "Safety properties formally verified"
          - "All injection vectors proven safe"
          - "Documentation complete"

      - id: RASH-2803
        title: "Correctness property verification"
        priority: high
        requirements:
          - "Verify semantic equivalence"
          - "Verify idempotence"
          - "Verify determinism"
        tests:
          - "test_semantic_equivalence_verified"
          - "test_idempotence_proven"
          - "test_determinism_checked"
        acceptance:
          - "Correctness formally verified"
          - "All properties proven"
          - "Examples documented"

  # SPRINT 29: Multi-Shell Optimization (Week 7-8)
  - id: sprint-29
    name: "Multi-Shell Target Support"
    goal: "Optimize for bash, zsh while maintaining POSIX"
    duration: 2_weeks
    tickets:
      - id: RASH-2901
        title: "Shell dialect detection"
        priority: high
        requirements:
          - "Detect shell from shebang"
          - "Dialect-specific IR annotations"
          - "Feature availability checking"
        tests:
          - "test_shell_detection_accurate"
          - "test_dialect_annotation_correct"
          - "test_feature_detection_works"
        acceptance:
          - "All major shells detected"
          - "Feature matrix complete"
          - "Fallback to POSIX works"

      - id: RASH-2902
        title: "Bash optimizations"
        priority: medium
        requirements:
          - "Use [[ ]] for tests"
          - "Use ${var:=default} syntax"
          - "Array literal support"
        tests:
          - "test_bash_test_optimization"
          - "test_bash_parameter_expansion"
          - "test_bash_arrays_correct"
        acceptance:
          - "Bash output optimized"
          - "20% size reduction for bash"
          - "All tests pass"

      - id: RASH-2903
        title: "Zsh optimizations"
        priority: low
        requirements:
          - "Use zsh-specific features"
          - "Optimize array operations"
          - "Use associative arrays"
        tests:
          - "test_zsh_features_work"
          - "test_zsh_array_optimization"
          - "test_zsh_associative_arrays"
        acceptance:
          - "Zsh output optimized"
          - "Advanced features supported"
          - "Tests pass on zsh"

  # SPRINT 30: Performance Optimization (Week 9-10)
  - id: sprint-30
    name: "Performance Excellence"
    goal: "Maintain <50µs transpilation, optimize memory"
    duration: 2_weeks
    tickets:
      - id: RASH-3001
        title: "Parser performance optimization"
        priority: high
        requirements:
          - "Profile parser hotspots"
          - "Reduce allocations"
          - "Optimize pattern matching"
        tests:
          - "benchmark_parser_performance"
          - "test_parser_allocation_count"
          - "test_parser_cache_effectiveness"
        acceptance:
          - "10% parser speedup"
          - "30% fewer allocations"
          - "Benchmarks documented"

      - id: RASH-3002
        title: "IR optimization passes"
        priority: medium
        requirements:
          - "Dead code elimination in IR"
          - "Constant folding"
          - "Common subexpression elimination"
        tests:
          - "test_dead_code_eliminated"
          - "test_constants_folded"
          - "test_cse_working"
        acceptance:
          - "IR optimization passes working"
          - "20% smaller IR for typical code"
          - "Output still correct"

      - id: RASH-3003
        title: "Emitter code generation optimization"
        priority: medium
        requirements:
          - "Reduce shell code size"
          - "Optimize common patterns"
          - "Minimize boilerplate"
        tests:
          - "test_emitter_output_size"
          - "test_emitter_pattern_optimization"
          - "test_emitter_boilerplate_minimal"
        acceptance:
          - "15% smaller shell output"
          - "Boilerplate <15 lines"
          - "All tests still pass"

validation:
  continuous_integration:
    - cargo build --release
    - cargo test --all-features
    - cargo clippy -- -D warnings
    - cargo fmt -- --check
    - cargo llvm-cov --lcov --output-path coverage/lcov.info
    - cargo mutants --minimum-score 0.90  # When enabled
    - make test-shellcheck
    - make test-determinism
    - make test-property

  quality_gates:
    - pmat analyze complexity --max 10
    - pmat analyze satd --zero-tolerance
    - pmat analyze efficiency --max "O(n)"
    - pmat quality-score --min 9.0
    - shellcheck -s sh generated_output.sh
    - make verify-determinism
    - make verify-posix

  performance_benchmarks:
    - transpile_simple_us: 19.1
    - transpile_complex_us: 50
    - memory_usage_mb: 10
    - output_size_overhead_percent: 5

execution_protocol:
  ticket_workflow:
    - step: write_failing_tests
      description: "Write comprehensive test suite that fails"
      deliverable: "Red tests committed"

    - step: minimal_implementation
      description: "Implement just enough to pass tests"
      deliverable: "Green tests, no extras"

    - step: refactor_with_quality
      description: "Refactor while maintaining green"
      deliverable: "Clean code, all metrics pass"

    - step: verify_quality_gates
      description: "Run all quality gates"
      deliverable: "All gates pass"

    - step: atomic_commit
      description: "Single commit per ticket"
      deliverable: "Git log shows ticket complete"

    - step: clean_build
      description: "Verify build passes all checks"
      deliverable: "CI/CD green"

metrics_tracking:
  per_ticket:
    - test_coverage
    - mutation_score
    - complexity_metrics
    - performance_benchmarks
    - quality_score
    - property_test_count

  per_sprint:
    - velocity
    - defect_rate
    - technical_debt
    - test_suite_runtime
    - build_time
    - shellcheck_pass_rate

toyota_way_principles:
  jidoka:
    description: "Build quality in"
    practices:
      - "Zero defects policy"
      - "EXTREME TDD"
      - "Quality gates enforced"
    enforcement: "Pre-commit hooks block violations"

  hansei:
    description: "Reflection and root cause analysis"
    practices:
      - "Five Whys for every bug"
      - "Sprint retrospectives"
      - "Root cause documentation"
    enforcement: "Required for all P0/P1 issues"

  kaizen:
    description: "Continuous improvement"
    practices:
      - "Weekly quality reviews"
      - "Complexity reduction sprints"
      - "Performance optimization"
    enforcement: "Metrics tracked per sprint"

  genchi_genbutsu:
    description: "Go and see - direct observation"
    practices:
      - "Dogfooding on real projects"
      - "Test on actual shell interpreters"
      - "Profile real workloads"
    enforcement: "Required before major releases"

current_status:
  version: "v1.0.0"
  release_date: "2025-10-10"
  quality_grade: "A+ (100/100)"
  test_pass_rate: "100% (756/756)"
  unit_tests: 752
  integration_tests: 4
  property_tests: 52
  mutation_kill_rate: "~83% (baseline)"
  coverage: "85.36% (core)"
  complexity_median: 1.0
  edge_cases_fixed: "11/11 (100%)"
  test_generator: "operational"
  status: "STABLE - Production Ready"
