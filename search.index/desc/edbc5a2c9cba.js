rd_("Bb-ge: numeric greater than or equal0Ai-gt: numeric greater than0lIf statementAeConditional execution10jI/O errors0Ao-le: numeric less than or equal0Af-lt: numeric less than0AjContains the success value000000000000000AbExecute cd command0BiUnique identifier for this transformation0BaI/O Streams for WASM Bash RuntimekI/O streams1BgIntermediate Representation (IR) module0BiExecute tr command (translate characters)0AoExecute wc command (word count)0j: addition0AbLogical operationsAaLogical operators10CnCommand-line argument access: $1, $2, $@, etc. Sprint 27b: \xe2\x80\xa60AhAlmquist Shell (BusyBox)0l/ : division0AhContains the error value000000000000000B`A suggested fix for a diagnostic0BhFor loop: for VAR in LIST; do BODY; doneAcFor loop with range10BhVariable assignment: readonly NAME=VALUE0AlLow - style or best practiceAlOptional: Minor improvementsBlLow-importance events (fine-grained details)210j% : modulo0A`: multiplication0jOCI format0m: subtraction0AiAdd an effect to this setA`Add a diagnostic10AnJavaScript API for bashrs WASM0BaAbstract Syntax Tree (AST) ModuleAoThe original AST being verifiedlPurified ASTAiBash Abstract Syntax Tree2BlAST (Abstract Syntax Tree) for GNU Makefiles2410AiCurrent working directory00oEnd byte offset0C`Environment variables (name -&gt; value mapping)AeEnvironment variables1BmEnable auto-fix suggestions (SAFE fixes only)CaApply fixes in-place (creates timestamped backup)BjApply fixes in-place (creates .bak backup)AeApply automatic fixesAfOptional suggested fix43210C`Get the number of events currently in the buffer0BdMinimum coverage percentage required0AiCreate new capture writerAhCreate new bash executorCnCreate new virtual filesystem with standard Unix directory \xe2\x80\xa6BbCreate a new empty coverage reportCaCreate a new formatter with default configurationAlCreate new empty test reportBnCreate a new configuration with default valuesAhCreate new quality scoreCeCreate a new abstract state with basic initializationB`Create a new empty transform logAgCreate a new source mapAaCreate a new spanAoCreate a new SAFE fix (default)AgCreate a new diagnosticAfCreate an empty resultAgCreate default metadataBbCreate a span with specific valuesBmCreate a new breakpoint at the specified lineBeCreate a new empty breakpoint managerAgCreate a new REPL stateBlCreate a new ReplConfig with custom settingsBgCreate a new transformation explanationAfCreate empty rationaleAfCreate new alternativeCcCreate a new ReplCompleter with default completionsAhCreate a new stack frameBnCreate a new debug session from script contentB`Create a new determinism checkerCbCreate a new replay verifier with default settingsB`Create a new idempotency checkerCnCreate a new idempotency verifier with default settings (3 \xe2\x80\xa6AhCreate a new explanationClCreate a new circular trace buffer with default capacity \xe2\x80\xa6CmCreate a new trace manager with default buffer size (1024 \xe2\x80\xa6AiCreate new capture writerAhCreate new bash executorCnCreate new virtual filesystem with standard Unix directory \xe2\x80\xa6BbCreate a new empty coverage reportCaCreate a new formatter with default configurationAlCreate new empty test reportBnCreate a new configuration with default valuesAhCreate new quality scoreCeCreate a new abstract state with basic initializationB`Create a new empty transform logAgCreate a new source mapAaCreate a new spanAoCreate a new SAFE fix (default)AgCreate a new diagnosticAfCreate an empty resultAgCreate default metadataBbCreate a span with specific valuesBmCreate a new breakpoint at the specified lineBeCreate a new empty breakpoint managerAgCreate a new REPL stateBlCreate a new ReplConfig with custom settingsBgCreate a new transformation explanationAfCreate empty rationaleAfCreate new alternativeCcCreate a new ReplCompleter with default completionsAhCreate a new stack frameBnCreate a new debug session from script contentB`Create a new determinism checkerCbCreate a new replay verifier with default settingsB`Create a new idempotency checkerCnCreate a new idempotency verifier with default settings (3 \xe2\x80\xa6AhCreate a new explanationClCreate a new circular trace buffer with default capacity \xe2\x80\xa6CmCreate a new trace manager with default buffer size (1024 \xe2\x80\xa6AcExecute pwd command0BhVirtual Filesystem for WASM Bash RuntimeAbVirtual filesystem1AcBash (version 3.2+)0CcBoolean value (converted to \xe2\x80\x9ctrue\xe2\x80\x9d/\xe2\x80\x9cfalse\xe2\x80\x9d)0CaCase statement: case WORD in PATTERN) BODY;; esacBfCase statement (for match expressions)10AbDash shell (180KB)AeDebian Almquist Shell10BcEcho a value (for function returns)0AaCommand execution0nExit with code0AhTest failed with message0AiRegular file with contentAfText file with content10AcGlob pattern: *.txt0BdHigh - reduces build reproducibilityChShould fix: Prevents serious operational or security \xe2\x80\xa6BoHigh-importance events (actual transformations)210kHTML report000Acifeq ($(VAR),value)0BmInformational message (style, best practices)0AkInitialize new Rash project0kJSON formatkJSON report1hJSON AST2222222120222222kLCOV format0CcLint shell scripts or Rust source for safety issuesB`Lint Makefile for quality issuesAmLint shell configuration fileB`Lint mode - show linting results3210CbMakefile parsing, purification, and transformation0BaNo verification (not recommended)0eNo-op0AbSuggestion or note0kTest passed0BgPerformance anti-pattern (not critical)0BbPure computation (no side effects)0CgInteractive REPL with integrated debugger (NEW in v7.0)0CcRisk: potential runtime failure (context-dependent)0BfSAFE: Semantic preservation guaranteed0A`Test was skipped0BdSource code span for error reportingBhSource span with start and end positionsAkA source code location spanAkSource location informationBdSource code span (line:column range)03421AiTest expression: [ expr ]CkRun bash script tests (NEW in v6.10.0 - Bash Quality Tools)10AcHuman-readable text0Abassert!(condition)0B`List of literal string argumentsAbFunction arguments10AmThe actual test function bodyAmFunction body (lines of code)1CbDiagnostic code (e.g., \xe2\x80\x9cSC2086\xe2\x80\x9d, \xe2\x80\x9cBP1001\xe2\x80\x9d)CeError code (optional, e.g., \xe2\x80\x9cDET001\xe2\x80\x9d, \xe2\x80\x9cE001\xe2\x80\x9d)BlThe actual code that triggered the detection02100AeCons of this approach0BbCore Test Generator Infrastructure0AdExecute echo command0BoEmit shell code from IR based on target dialectBjEmit POSIX shell code from a tiny AST node10AoSource file path (if available)0AoReturns the argument unchanged`Get recovery hint for this errorAkSuggested fix or workaround10AjInitialize the WASM module0BaCalls <code>U::from(self)</codenGet an iterator over events in chronological order (oldest \xe2\x80\xa60BaLine number where test is definedAgLine number (1-indexed)AjLine number (if available)1CcLine number where this frame was called (1-indexed)BoLine number where pattern was found (1-indexed)BoLine number where difference occurs (1-indexed)CaLine number where operation was found (1-indexed)65453210AeGet current REPL mode0AaCurrent REPL modeCgTest function name (e.g., \xe2\x80\x9ctest_my_function_basic\xe2\x80\x9d)lProject nameBiVariable name (valid POSIX variable name)ChTarget name (e.g., \xe2\x80\x9cbuild\xe2\x80\x9d, \xe2\x80\x9ctest\xe2\x80\x9d, \xe2\x80\x9cclean\xe2\x80\x9d)mVariable nameCdFunction name (e.g., \xe2\x80\x9cwildcard\xe2\x80\x9d, \xe2\x80\x9cpatsubst\xe2\x80\x9d)AoName of the function or context6543210CfExecute to next line at same call depth (skip over \xe2\x80\xa60lThe AST node0BcGet explanatory note for this errorAnAdditional context/explanation10AaProject directoryB`Absolute or simple relative pathAkHash path from leaf to rootAdFile path to includeAgPath to the script file43210AePros of this approach0BjCreate a pure effect set (no side effects)0B`Push a new event into the buffer0nRoot directoryBdPurification rule that detected this0AeOutput from first run0AfOutput from second run0AeOutputs from each run000BoScan bash script for non-deterministic patternsBnScan bash script for non-idempotent operations10BfGet the source span for this statementoSource location0000000AbLocation in source2111111110AgExecute one line (step)0BnUTF-8 normalized text, zero-copy when possibleBcComment text (without the # prefix)10AiTHEN clause from comments0AnWebAssembly Support for bashrs0AiWHEN clause from comments0AoArray/list: (item1 item2 item3)nCompound types10CjRun comprehensive quality audit (NEW in v6.12.0 - Bash \xe2\x80\xa60AhBasic safety checks only0oBreak statement0BeTranspile Rust source to shell script0BhCheck Rust source for Rash compatibility0lDebug formatBcDebug mode - step-by-step execution10CcError (definite syntax or semantic error, must fix)0Acassert!(!condition)0AeHuman-readable format0AeHuman-readable report111AoHuman-readable format (default)2212220iifdef VAR0Adifneq ($(VAR),value)0AbInteger comparison0A`JUnit XML format0Ae-eq: numeric equality0Ag-ne: numeric inequality0AeParse Makefile to AST0B`POSIX sh - maximum compatibility0lSARIF formatBgSARIF format (for GitHub Code Scanning)CiSARIF format (Static Analysis Results Interchange Format)210ClScore bash script quality (NEW in v6.11.0 - Bash Quality \xe2\x80\xa60BmShell assignment (!=) - execute shell command0Ab=: string equality0Ae!=: string inequality0AlToken with type and position0BhInternal engine events (structural only)0BhUnion types for shell\xe2\x80\x99s dynamic nature0CmUntil loop: until CONDITION; do BODY; done Note: Purified \xe2\x80\xa60jWhile loop000B`~/.zshrc - Zsh interactive shell0AjBuild the final source map0B`Change current working directory0CkCheck if the given Rust code is valid for transpilation \xe2\x80\xa6CeCheck if files are formatted without applying changesCmCheck for sed usage that could be replaced with parameter \xe2\x80\xa6AlCheck for useless use of catCbCheck for deprecated backtick command substitutionC`Check for wrong quoting in printf format stringsCdCheck for echo with escape sequences without -e flagBkCheck for variables assigned but never usedBoCheck for useless for loops with single elementBkCheck for find in for loops without -print0AiCheck for ls in for loopsCaCheck for unquoted command substitutions (SC2046)BmCheck for unquoted $* that should be \xe2\x80\x9c$@\xe2\x80\x9dCgCheck for constant comparisons (missing $ on variables)CfCheck for unquoted variables in [[ \xe2\x80\xa6 ]] conditionalsDeCheck for unquoted array expansions ($@, $<em>, ${array[@]}, </em>\xe2\x80\xa6CjCheck for implicit string length tests that should use \xe2\x80\xa6CeCheck for string comparison operators used on numbersC`Check for decimal numbers in arithmetic contextsCaCheck for quoted regex patterns in =~ comparisonsCeCheck for variable/command expansion in single quotesBoCheck for unquoted variable expansions (SC2086)ChCheck for useless echo in command substitutions (SC2116)BgCheck for array reference without indexBoCheck for variables referenced but not assignedAnCheck for read without -r flagBcCheck for cd without error handlingBmCheck for string assignment to array variableBaCheck for indirect $? comparisonsBhCheck for associative array without keysCcCheck for space between = and ( in array assignmentBiCheck for deprecated egrep/fgrep commandsBgCheck for $RANDOM usage in shell scriptBiCheck for timestamp usage in shell scriptBbCheck for unordered wildcard usageAoCheck for mkdir without -p flagAlCheck for rm without -f flagBcCheck for ln -s without rm -f firstBdCheck for command injection via evalCbCheck for unquoted variables in dangerous commandsBcCheck for unquoted {} in find -execC`Check for disabled TLS verification in wget/curlAkCheck for hardcoded secretsBhCheck for unsafe temporary file creationB`Check for unsafe sudo operationsBbCheck for curl/wget piped to shellBoCheck for unordered wildcard usage in MakefilesChCheck for non-idempotent mkdir usage in Makefile recipesCjCheck for unquoted variable expansions in Makefile recipesBeCheck for missing .PHONY declarationsCjCheck for recursive variable assignments with $(shell \xe2\x80\xa6)BkCheck for targets with missing dependenciesBoCheck for echo/printf commands without @ prefixC`Check for spaces instead of tabs in recipe linesBfCheck for hardcoded installation pathsCcCheck for missing error handling in recipe commandsBaCheck for dangerous pattern rulesBdCheck for recursive make invocationsClCheck for missing .SUFFIXES to disable built-in implicit \xe2\x80\xa6BgCheck for inefficient shell invocationsCaCheck for missing .DELETE_ON_ERROR special targetBmCheck for unquoted variables in prerequisitesBeCheck for missing .ONESHELL directiveBaCheck for parallel-unsafe targetsBgCheck for unnecessary export statementsCkCheck for missing include guards in Makefiles meant for \xe2\x80\xa6CkCheck if the given Rust code is valid for transpilation \xe2\x80\xa6CeCheck if files are formatted without applying changesCmCheck for sed usage that could be replaced with parameter \xe2\x80\xa6AlCheck for useless use of catCbCheck for deprecated backtick command substitutionC`Check for wrong quoting in printf format stringsCdCheck for echo with escape sequences without -e flagBkCheck for variables assigned but never usedBoCheck for useless for loops with single elementBkCheck for find in for loops without -print0AiCheck for ls in for loopsCaCheck for unquoted command substitutions (SC2046)BmCheck for unquoted $* that should be \xe2\x80\x9c$@\xe2\x80\x9dCgCheck for constant comparisons (missing $ on variables)CfCheck for unquoted variables in [[ \xe2\x80\xa6 ]] conditionalsDeCheck for unquoted array expansions ($@, $<em>, ${array[@]}, </em>\xe2\x80\xa6CjCheck for implicit string length tests that should use \xe2\x80\xa6CeCheck for string comparison operators used on numbersC`Check for decimal numbers in arithmetic contextsCaCheck for quoted regex patterns in =~ comparisonsCeCheck for variable/command expansion in single quotesBoCheck for unquoted variable expansions (SC2086)ChCheck for useless echo in command substitutions (SC2116)BgCheck for array reference without indexBoCheck for variables referenced but not assignedAnCheck for read without -r flagBcCheck for cd without error handlingBmCheck for string assignment to array variableBaCheck for indirect $? comparisonsBhCheck for associative array without keysCcCheck for space between = and ( in array assignmentBiCheck for deprecated egrep/fgrep commandsBgCheck for $RANDOM usage in shell scriptBiCheck for timestamp usage in shell scriptBbCheck for unordered wildcard usageAoCheck for mkdir without -p flagAlCheck for rm without -f flagBcCheck for ln -s without rm -f firstBdCheck for command injection via evalCbCheck for unquoted variables in dangerous commandsBcCheck for unquoted {} in find -execC`Check for disabled TLS verification in wget/curlAkCheck for hardcoded secretsBhCheck for unsafe temporary file creationB`Check for unsafe sudo operationsBbCheck for curl/wget piped to shellBoCheck for unordered wildcard usage in MakefilesChCheck for non-idempotent mkdir usage in Makefile recipesCjCheck for unquoted variable expansions in Makefile recipesBeCheck for missing .PHONY declarationsCjCheck for recursive variable assignments with $(shell \xe2\x80\xa6)BkCheck for targets with missing dependenciesBoCheck for echo/printf commands without @ prefixC`Check for spaces instead of tabs in recipe linesBfCheck for hardcoded installation pathsCcCheck for missing error handling in recipe commandsBaCheck for dangerous pattern rulesBdCheck for recursive make invocationsClCheck for missing .SUFFIXES to disable built-in implicit \xe2\x80\xa6BgCheck for inefficient shell invocationsCaCheck for missing .DELETE_ON_ERROR special targetBmCheck for unquoted variables in prerequisitesBeCheck for missing .ONESHELL directiveBaCheck for parallel-unsafe targetsBgCheck for unnecessary export statementsCkCheck for missing include guards in Makefiles meant for \xe2\x80\xa6B`Clear all events from the bufferAnClear all events in the buffer10BdGet the number of active breakpoints0AaEnable debug modeBbEnable debug mode (default: false)10ChCreate a dummy span (for testing or when location is \xe2\x80\xa60AkCreate an empty Merkle tree0AdThe underlying errorBhEnhanced error types for Makefile parser10AhExact character position0AjGIVEN clause from comments0AgOverall grade (A+ to F)0BeInfer dialect with confidence scoring0oInput Rust file0CaInput AST file (JSON) or inline AST specificationBhInput file (shell script or Rust source)AfInput bash script file000CcInput config file (.bashrc, .zshrc, .profile, etc.)AaInput config file0nInput Makefile0066543333211000CbAll items in the Makefile (targets, variables, \xe2\x80\xa60CfGet a human-readable label for this significance level0jBash LexerAcLexer for Makefiles01BbLines of the script being debuggedClMerge with another configuration, preferring non-default \xe2\x80\xa6BbMerge another result into this one10A`Create directory0AdAvailable mode namesBiParse mode from string (case-insensitive)BkParse Rust source code into a RestrictedAst10BgWhether this target is marked as .PHONY0B`Create a span for a single point0BlOptional SMT proof for semantic preservationBaSMT formula asserting equivalence10CkFilter by specific rules (comma-separated: MAKE001,MAKE003)0BdLint rules for shell script analysis0AjNumeric score (0.0 - 10.0)0AaStart byte offset0AlGet statistics about the logB`Get statistics about the mappingAeGet buffer statisticsCfGet buffer statistics (retention rate, capacity, etc.)3210oExecution steps0AdAll discovered tests0BaBrief title of the transformationAfTitle of the construct10BgCore type definitions for the formatter0BhUnification algorithm for type inferenceAeUnion two effect sets0AdLiteral string valuenVariable value10BcAppend (+=) - add to existing value0Bb~/.bashrc - Bash interactive shell0AdString concatenationAcConcatenated values10CaShell configuration file management (NEW in v7.0)0BhConfiguration options for transpilation.0AnFeature is directly compatible0mDocker format0CmEnvironment variable expansion: ${VAR} or ${VAR:-default} \xe2\x80\xa60Alassert_eq!(actual, expected)0CiFormat bash scripts (NEW in v6.14.0 - Bash Quality Tools)0jifndef VAR0AhMedium - potential issueCaRecommended: Improves robustness and reduces riskBkMedium-importance events (rule evaluations)210BgNormal mode - execute commands directly0BkPurify Makefile (determinism + idempotency)CjPurify shell configuration file (fix issues automatically)CdPurify mode - show purified version of bash commands210A`$RANDOM variable0A`Return statement0BoRule identifier (e.g., IDEM001, DET003, SEC002)0BiPrevents injection, race conditions, etc.0CiSimple assignment (:=) - expanded immediately (PREFERRED)0BaStrict verification (recommended)0oPrimitive typesnString literal10AcSyntax/parse errors0BfA target with prerequisites and recipe0BhUNSAFE: Semantic transformation required0BgVerify shell script matches Rust source0AlArrays (name -&gt; elements)AgGet mode name as string0AoRash - Rust to Shell TranspilerBjANSI color codes for terminal highlightingAlColumn number (if available)AiColumn number (1-indexed)AjConfig management for WASMAeConfiguration optionsBcShell configuration file managementBlCompressed span deltas for memory efficiencyBgDET001: Non-deterministic $RANDOM usageBiDET002: Non-deterministic timestamp usageB`DET003: Unordered wildcard usageAfEnable this breakpointBnNormalization engine for syntax transformationAhAny errors that occurredBcEvent storage (circular FIFO queue)AdCheck if path existsAbCount failed testsBjExecute until the current function returnsBcVariable flavor (=, :=, ?=, +=, !=)BoFormal verification module for the rash emitterAaFormat a bash ASTmOutput format00000000mReport format1BbFormat the load result for displayBgFormat the execution result for displayAnFormat explanation for displayAmGet current working directoryBlTree height (log2 of leaf count, rounded up)AiInput bash script file(s)AbLength of the spanAmLength of problematic sectionAdbashrs Native LinterCkMinimal runtime loader for embedded scripts This module \xe2\x80\xa6AjREPL Script Loading ModuleAhOutput shell script fileB`Output file (defaults to stdout)AbOutput binary pathAmOutput file for fixed contentB`Output file for HTML/LCOV formatBcOutput file (for single input file)CiOutput file (defaults to stdout, or in-place with \xe2\x80\x93fix)ChOutput file (defaults to stdout or in-place with \xe2\x80\x93fix)BnOutput file (defaults to in-place with \xe2\x80\x93fix)BbOutput formatters for lint resultskBash ParseroMakefile parserAbCount passed testsBeCONFIG-002: Quote Variable ExpansionsC`Recipe lines (commands to execute, tab-indented)lRecipe linesBcShow detailed transformation reportAiReport of transformationsAiSafety score (0.0 - 10.0)CjSC2001: See if you can use ${variable//search/replace} \xe2\x80\xa6AjSC2002: Useless use of catBnSC2006: Use $(\xe2\x80\xa6) instead of legacy backticksBnSC2027: Wrong quoting in printf format stringsBlSC2028: Echo may not expand escape sequencesBhSC2034: Variable assigned but never usedCnSC2043: Use direct command instead of for loop with single \xe2\x80\xa6CmSC2044: Use find with -print0 and read -d \xe2\x80\x98\xe2\x80\x99 for safe \xe2\x80\xa6BkSC2045: Don\xe2\x80\x99t use ls output for iterationCgSC2046: Quote command substitutions to prevent word \xe2\x80\xa6CfSC2048: Use \xe2\x80\x9c$@\xe2\x80\x9d (with quotes) to prevent word \xe2\x80\xa6CmSC2050: This expression is constant. Did you forget the $ \xe2\x80\xa6ClSC2066: Quote variables in [[ \xe2\x80\xa6 ]] to prevent globbing \xe2\x80\xa6CmSC2068: Double quote array expansions to prevent globbing \xe2\x80\xa6BiSC2070: Use -n/-z for string length testsChSC2071: Use arithmetic comparison, not string comparisonCkSC2072: Decimal numbers not supported in arithmetic contextCfSC2076: Don\xe2\x80\x99t quote right-hand side of =~ (regex \xe2\x80\xa6ClSC2081: Expressions don\xe2\x80\x99t expand in single quotes, use \xe2\x80\xa6CkSC2086: Double quote to prevent globbing and word splittingCeSC2116: Useless echo wrapping in command substitutionCnSC2128: Expanding an array without an index only gives the \xe2\x80\xa6BlSC2154: Variable referenced but not assignedBoSC2162: read without -r will mangle backslashesBkSC2164: Use cd \xe2\x80\xa6 || exit in case cd failsCmSC2178: Variable was used as an array but is now assigned \xe2\x80\xa6CmSC2181: Check exit code directly with e.g. \xe2\x80\x98if mycmd;\xe2\x80\x99\xe2\x80\xa6CkSC2190: Elements in associative arrays need index, e.g. \xe2\x80\xa6CmSC2191: The = here is literal. To assign by index, use ( [\xe2\x80\xa6CmSC2196: egrep is deprecated and non-standard. Use grep -E \xe2\x80\xa6BbSEC001: Command Injection via evalBdSEC002: Unquoted Variable in CommandBfSEC003: Unquoted find -exec {} PatternBjSEC004: wget/curl Without TLS VerificationAiSEC005: Hardcoded SecretsBfSEC006: Unsafe Temporary File CreationCcSEC007: Running Commands as Root Without ValidationBlSEC008: Using <code>curl | sh</code> PatternBiCreate an effect set with a single effectAmRust source code to transpileoCaptured stderrAaGet stderr outputAeStandard error buffernStandard errorAoStandard error from the commandCnThis module provides support for stdlib functions that are \xe2\x80\xa6oCaptured stdoutAaGet stdout outputAfStandard output bufferoStandard outputB`Standard output from the commandBeEnable strict mode (fail on warnings)0BnWhether to enable strict mode (default: false)AdTarget shell dialectBjTarget shell dialect for generated scriptsAkGet all effects as a vectorAmVerification stringency levelCcLevel of verification to apply during transpilationCcVerify determinism by running script multiple timesCcVerify script idempotency by running multiple timesCdVerify that the given IR satisfies safety propertiesBkAnalyze shell configuration file for issuesCaRoot AST node representing a complete bash scriptAa$BASHPID variableoBusybox (900KB)AlByte position in source textAbCase statement armBaCharacter position in source textBcCommand execution: echo \xe2\x80\x9chello\xe2\x80\x9dC`Normal command context: collapse to single spaceBeComment (preserved for documentation)nA comment lineAiComment for documentationAlCompile to standalone binaryAmReading environment variablesBfExplain mode - explain bash constructsAdGeneric shell scriptBaGeneric transformation (fallback)AoHere-document: preserve exactlyAdAn include directiveBnGenerate formal verification inspection reportnString literalBnRoot AST node representing a complete MakefileAjMinimal interpreter (50KB)BhNon-null constraint: variable is definedAn~/.profile - POSIX login shellAjScript loaded successfullymSymbolic linkBaThe tiny subset of rash AST nodesAlType variables for inferenceAgVirtual filesystem nodeB`Warning (likely bug, should fix)AhAdd a con (disadvantage)AeAdd a pro (advantage)BiCONFIG-003: Consolidate Duplicate AliasesBiAnalyze test suite and calculate coverageBkAuto-fix application for linter diagnosticsBkCode Generation for Bash-to-Rash TranspilerBdMonoid composition with optimizationBoCompose semantic deltas (associative operation)BeSource code context (line with error)BiDefault significance is MEDIUM (balanced)AdDetailed explanationC`Shell dialect detection and compatibility systemAhWhether the lines differAgDisable this breakpointBcGet a human-readable representationBbShow diff without applying changesBdDry run (show what would be changed)BkDry-run mode (don\xe2\x80\x99t actually modify file)CbGet all effects from this IR node and its childrenC`Get elapsed time since trace manager was createdAoEmit a change directory commandAiShell Code Emitter ModuleBfFormal emitter for the tiny AST subsetAfEnd column (1-indexed)AjAll transformation entriesBeCode example showing this alternativemExample usageAiExecute a builtin commandAeExecute a bash scriptCfB+ tree for forward mapping (original -&gt; formatted)AkGet an environment variableBaGet an environment variable valueAcGet command historyBnCommand history (for up/down arrow navigation)AmIDEM001: Non-idempotent mkdirAjIDEM002: Non-idempotent rmAjIDEM003: Non-idempotent lnBlGenerate a comprehensive verification reportAnCheck if buffer is at capacityB`Check if this effect set is pureCcCheck if this IR node is pure (has no side effects)ChCheck if this fix can be applied with <code>--fix</code>CdTransform logging with Merkle tree for integrity \xe2\x80\xa6CfMAKE001: Non-deterministic wildcard usage in MakefilesCaMAKE002: Non-idempotent mkdir in Makefile recipesCfMAKE003: Unsafe variable expansion in Makefile recipesChMAKE004: Missing .PHONY declaration for non-file targetsCcMAKE005: Recursive variable assignment in MakefilesBdMAKE006: Missing target dependenciesC`MAKE007: Silent recipe errors (missing @ prefix)BlMAKE008: Tab vs spaces in recipes (CRITICAL)BgMAKE009: Hardcoded paths (non-portable)BkMAKE010: Missing error handling (|| exit 1)B`MAKE011: Dangerous pattern rulesBjMAKE012: Recursive make considered harmfulBnMAKE013: Missing .SUFFIXES (performance issue)BeMAKE014: Inefficient shell invocationBaMAKE015: Missing .DELETE_ON_ERRORBkMAKE016: Unquoted variable in prerequisitesAjMAKE017: Missing .ONESHELLCbMAKE018: Parallel-unsafe targets (race conditions)BgMAKE019: Environment variable pollutionAnMAKE020: Missing include guardAfHuman-readable messageAaIssue descriptionAbMain error messageAoRun only tests matching patternCgCharacter-level precision with token boundary awarenessAeResults for each testCfB+ tree for reverse mapping (formatted -&gt; original)lRuntime typeAdBash Quality ScoringAkSet an environment variableAcCount skipped testsAkCode snippet (if available)B`Whether execution was successfulAjTesting score (0.0 - 10.0)AcBash Test FrameworkB`Timeout in seconds (default: 30)CdExecution timeout for commands (default: 30 seconds)BaSave configuration to a TOML fileAiGet result as JSON stringBdConvert configuration to TOML stringBdConvert to TOML configuration formatAeEnable verbose outputAbGet bashrs versionCiArgument count: $# Sprint 27b: Command-Line Arguments \xe2\x80\xa6AiExpression-level AST nodeAjWrapper type for AST nodesAhStatement-level AST nodeBbA discovered test in a bash scriptBcUnique identifier for a code branchAfBash built-in commandsAbContinue statementAfContract specificationCkGenerate coverage report (NEW in v6.13.0 - Bash Quality \xe2\x80\xa6BlCritical - breaks determinism or idempotencyChMust fix: Prevents catastrophic failures or critical \xe2\x80\xa6C`Critical events (conflicts, security violations)CgExit code of last command: $? Sprint 27c: Exit Code \xe2\x80\xa6AbReading from filesBcFile type affects suppression rulesBnExecution completed without hitting breakpointAcFunction definition0AhInternal compiler errorsBgStatistics about the transformation logCjMakefile constructs (targets, variables, conditionals, \xe2\x80\xa6oMarkdown reportoMarkdown format1AnMaximum verification (slowest)CgPurifies bash AST to ensure idempotency and determinismAdREPL execution modesB`Sequential execution of commandsAfSequence of operationsAbViolation severityAnSeverity level of a diagnosticAaString comparisonAkTerminal output with colorsAmTest expression (conditional)AbA single unit testBbVariable reference: $VAR or ${VAR}AbVariable referenceAeA variable assignmentAm~/.zprofile - Zsh login shellBaShell configuration file analyzerBbBrief description of this approachAjThe AST node being emittedBgBuilt-in Bash Commands for WASM RuntimeBgGet the maximum capacity of this bufferB`Maximum capacity (default: 1024)BlError category (for grouping similar errors)AjCategory of transformationBeChild annotations for composite nodesBdList of commands to execute in orderB`REPL commands (without : prefix)AlComments and their positionsAjCompiler module for bashrsCcCheck if this effect set contains a specific effectCiContract system for shell-specific type inference and \xe2\x80\xa6AnCoverage Tracking and AnalysisAgInclude detailed tracesAjShow detailed test resultsAnShow detailed dimension scoresAkShow detailed check resultsB`Show detailed coverage breakdownBoCreate a disabled trace manager (zero overhead)AmDoctest Generation (Sprint 3)AdEnd line (1-indexed)BeBash Script Executor for WASM RuntimeAmREPL Command Execution ModuleAmWhether execution is completeAgConvert AST to Shell IRBjGenerate complete test suite from bash ASTA`Get node at pathBlCreate identity mapping for unchanged sourceCdTrue if purified code has no critical violations \xe2\x80\xa6AlCheck if the buffer is emptyBiCheck if character at position is a quoteAnCheck if the AST node is validAnList all environment variablesBkGet the location information for this errorlLog metadataC`Semantic annotations preserved across transformsAkMetadata about the MakefileBhOptimize Shell IR based on configurationAmEnable IR optimization passesBoWhether to optimize the output (default: false)BcWhether this is optional (-include)AeOriginal code snippetAbOriginal bash lineBjEnable parallel processing for large filesBeTranslation Patterns for Bash-to-RashAlPurified version of the lineBaShell configuration file purifierAiMain REPL loop for bashrs0AnSemantic Analysis for Bash ASTBbSemantic analysis for Makefile ASTmSet REPL modenSeverity level000BjGet a snapshot of the current trace bufferBoTiny subset of rash AST for formal verificationBmTokenize bash input into a sequence of tokensAnType environment for variablesCkUse tabs instead of spaces for indentation (default: false)CbValidate that an AST conforms to Rash restrictionsAfValidate configurationBnWalk an AST and call the visitor for each nodeBaAny warnings during transpilationAcAdd a suggested fixAoActive whitespace context stackCbAdded a flag to command (e.g., mkdir \xe2\x86\x92 mkdir -p)AeArithmetic expressionAdTest assertion typesChUnique identifier for AST nodes (cheap to copy, 8 bytes)CjB+ tree for O(log n) point queries, O(k + log n) range \xe2\x80\xa6AhWorking directory changeAgDirectory with childreniDirectoryAjELF structures for parsingAkEnvironment variable changeB`File not found or cannot be readA`Writing to filesAhResult of applying fixesBjPattern for translating bash if statementsAnI/O streams for bash executionnLinting eventsAiLogical OR (||) operationAlassert_ne!(actual, expected)B`A PATH entry found in the configo$$ (process ID)BmRecursive assignment (=) - expanded when usedB`Mutable state for a REPL sessionBeOutput from a single script executionBiTracks variable scopes and their metadataBhShell-specific type system for contractsBlCharacter-level bidirectional source mappingBlCompressed span deltas for memory efficiencyBddate command or timestamp generationBbToken type for syntax highlightingBoTransformations form a monoid under compositionAfType error informationAkVariable assignment flavorsA`Linter violationAnAdd a new transformation entryAbAdd token boundaryBdGet captured content as UTF-8 stringAeClear all breakpointsnCondition typeAjBuild distroless containerBaDetected contracts/specificationsBiEvaluate a rash AST node in a given statenLast exit codeiExit codemGet exit codeAmExit code of the last command2AgExit code (0 = success)BcPre-flight Formatter ImplementationBgGet priority for a diagnostic rule codeBcLoad configuration from a TOML fileBaDetect config type from file pathBcLoad configuration from TOML stringBiDefined functions (name -&gt; definition)AdFunction definitionsBhFunction names extracted from the scriptAaGet stdin contentBgApply syntax highlighting to bash inputCeProof inspection and intermediate artifact generationBnCheck if this fix should never be auto-appliedBfLint bash input and return diagnosticsBfMaximum recursion depth (default: 100)0CbMinimum grade required (A+, A, B+, B, C+, C, D, F)BbDon\xe2\x80\x99t create backup (dangerous!)CeGet the node type as a string (for tracing/debugging)BeMain normalization with full trackingAlDescription of the operationBfWhether the script parsed successfullyBmPop the most recent frame from the call stackBmPreserved byte ranges (e.g., string literals)AlReasoning for the generationC`Get the current root hash for integrity checkingAeRoot hash of the treeCkNumber of verification runs to perform (default: 3, min: 2)AhNumber of runs performedAnRun all tests in a bash scriptAjEnable sandboxed executionCfCreate a sandboxed configuration (for untrusted input)BkEnable sandboxed execution (default: false)CbOperational semantics for rash AST and POSIX shellBaSet stdin content (for pipelines)BaShow help for the specified topicAhStart column (1-indexed)AfStreaming I/O for WASMB`Time span of all transformationsBiTimestamp when transformation was appliedAgEnd of containing tokenBcThe transformation that was appliedCaTranspile Rust source code to POSIX shell script.AoVariable declarations and usageAaGet all variablesBkSession variables (persist across commands)AaSession variablesBaAdd comment suggesting manual fixAoArithmetic expansion: $((expr))BlArithmetic expression: remove all whitespaceBdArithmetic operation (for $((expr)))AnVariable assignment: VAR=valueCeLine-based breakpoint with optional condition and \xe2\x80\xa6BjComparison operation (for test conditions)AhConfiguration file typesAaA lint diagnosticBjEnhanced diagnostic information for errorsCaResult of evaluating an AST node or shell commandjFile testsB`Options for auto-fix applicationBfPattern for translating bash for loopsAbJSON output formatAnOutput format for lint resultsAnCollection of lint diagnosticsAeln -s without -f flagAjResult of loading a scriptBbLogical AND (&amp;&amp;) operationAiLogical NOT (!) operationBjMerkle tree for log integrity verificationAgScript has parse errorsnParsing eventsBaConfiguration for the bashrs REPLAbrm without -f flagBeSMT proof representation (simplified)AoA stack frame in the call stackBfInformation about a parsed target lineAeTest execution reportAoResult of running a single testAeCore trace event enumBaStatistics about the trace bufferAaValidation errorsAiCheck if all tests passedBkGet an ANSI color code for terminal displayoANSI reset codeCcGet the current call depth (number of stack frames)AjGet the current call stackBfCall stack for tracking function callsAmComplexity score (0.0 - 10.0)CkCreate fix by replacing hardcoded /usr/local with $(PREFIX)CbCreate a fix by suggesting a more specific patternCiCreate fix by suggesting include directive instead of \xe2\x80\xa6CfCreate a fix by replacing inefficient pattern with \xe2\x80\xa6CiCreate fix by adding .DELETE_ON_ERROR: at top of MakefileCjCreate a fix by adding quotes around the unquoted variableBnCreate a fix by removing \xe2\x80\x9cexport \xe2\x80\x9c keywordAfLog creation timestampAhWorking directory changeAoPatterns detected in the scriptAmIssues detected in the scriptAlDiagnostic types for lintingCaDirection indicators (true = right, false = left)BkItems in the \xe2\x80\x9celse\xe2\x80\x9d branch (if present)AbEmit a parse eventAgEmit verification proofBjWhether to emit formal verification proofsBjError type (Parse, Lint, Command, Runtime)CfEvaluate a POSIX shell command string in a given stateCoAbstract filesystem representation (path -&gt; content) For \xe2\x80\xa6AkVirtual Filesystem for WASMBfFilter environment variables by prefixAjFixed code (if applicable)BfCheck if a flag was added to a commandAnFormat AST for display in REPLBnCreate a diagnostic from an error with contextAbFilesystem changesB`Code generators for Makefile ASTBcGet captured stderr as UTF-8 stringBcGet captured stdout as UTF-8 stringAoRecursive glob pattern matchingAmCheck if there are any errorsBjCheck if Makefile has any ifndef directiveAmHash a single transform entryAoCheck if a command is a builtinCcCheck if trimmed line starts with the given commandAjCheck if line is a commentAkCheck if tracing is enabledAoCheck if word is a bash keywordB`Index of the leaf being verifiednGet line countAmNumber of lines in the sourceAmNumber of lines in the scriptBnLint a shell script and return all diagnosticsBiMaximum memory usage in MB (default: 100)BnMaximum memory usage in bytes (default: 100MB)ClCreate an UNSAFE fix (provides suggestions, no automatic \xe2\x80\xa6AoParse bash input and return ASTCbParse expression: term ((\xe2\x80\x98+\xe2\x80\x99 | \xe2\x80\x98-\xe2\x80\x99) term)*DaParse term: factor ((\xe2\x80\x98<em>\xe2\x80\x99 | \xe2\x80\x98/\xe2\x80\x99 | \xe2\x80\x98%\xe2\x80\x99) factor)</em>BdPush a new frame onto the call stackBoStep-by-step execution trace for rash semanticsAfRun number (1-indexed)CbSet the original source text for ignore directivesCiCharacter-level bidirectional mapping with interval treesBmSource mapping with character-level precisionAfStart line (1-indexed)AlSuggested fix (if available)AhSuggested fix (optional)mSuggested fixBeCreate a test state with common setupAnItems in the \xe2\x80\x9cthen\xe2\x80\x9d branchCdAppend-only log for verification context propagationBnTransform algebra and normalization operationsAdUnit Test GenerationBfShellCheck-compatible validation levelAaEnable debug modeChAdded quotes around variable (e.g., $foo \xe2\x86\x92 \xe2\x80\x9c$foo\xe2\x80\x9d)CaA single alternative approach to a transformationB`Metadata about the parsed scriptBb~/.bash_profile - Bash login shellAaBuffer statisticsBdCase pattern: preserve for alignmentBgA conditional block (ifeq, ifdef, etc.)CiConditional assignment (?=) - only if not already definedAlA single configuration issueBdA specific issue found in the configCkCore shell dialects for scoring (excludes Inferred variant)CaMakes code produce consistent results across runsB`Explanation for a bash constructCkPriority for applying fixes when multiple fixes overlap \xe2\x80\xa6AjStored function definitionBnMakes code safe to re-run without side effectsBjInterval set for tracking preserved rangesBfContext for lint suppression decisionsBeMetadata about the transformation logBnMerkle proof for verifying log entry integritynA pattern ruleAaProcess executionAcPurification eventsClMatch recipe lines (lines starting with tab after target \xe2\x80\xa6AkRemoved a flag from commandBhSARIF output format (simplified version)o#[should_panic]BcStatistics from streaming operationlString testsCbMatch target declarations (word followed by colon)BcTarget with its shared state writesB`Unique identifier for transformsAjContext for type inferenceAfAdd failure eliminatedAhAdd a command to historyCfAdd a mapping between original and formatted positionsBkApply fixes from lint result to source codeCkAssumptions required for this fix (for SafeWithAssumptions)BdBackup file path (if backup created)AjBash-to-Rash Parser ModuleAbBreakpoint managerkClear stdinAkCompare working directoriesAiType constraints to solveBbTest description from TEST commentAnGet human-readable description0AfDescription of the fixAaBrief descriptionAdGet mode descriptionBnGet a human-readable description of this eventBeDeterminism checking for bash scriptsAeAll diagnostics foundBhAll diagnostics (for detailed reporting)CeLines that differ between runs (if non-deterministic)CbLines that differ between runs (if non-idempotent)BdTotal execution time in millisecondsBdWhether to enable SIMD optimizationsAlEnvironment variable changesoGet error countBjError count (for debugging and statistics)C`Get the number of events currently in the bufferAoDetailed explanation (optional)AjHuman-readable explanation0kFinal stateAdFormat an expressionAbFormat a statementAfFormat test expressionBcCreate Merkle tree from leaf hashesAlGet a specific history entryB`Check if script has shebang lineAnRelated help topics (optional)AbGet history lengthCgPut \xe2\x80\x98then\xe2\x80\x99 on same line as \xe2\x80\x98if\xe2\x80\x99 (default: true)BcCheck if line ends a case statementCjCheck if this value is a constant (doesn\xe2\x80\x99t depend on \xe2\x80\xa6AnCheck if execution is finishedAiCheck if line ends a loopAnGet the number of issues foundAiGet issues as JSON stringBcAll leaf hashes (one per log entry)CbOptional line number where transformation occurredBbLint results for the purified codeAnLoad a bash script from a fileAgMake indentation stringB`Makefile Parser and PurificationBgMaximum history entries (default: 1000)B`Maximum number of threads to useBfMerkle tree for integrity verificationBkCreate new I/O streams with capture buffersAeDisable optimizationsCfOptional output path (if None, modifies file in-place)C`Step-by-step execution trace for POSIX semanticsCePurify bash input and return purified AST with reportAlQuote a value for assignmentAdThe replacement textBcResulting span after transformationA`Rust source fileAfInput Rust source fileBgFlag indicating exit command was calledAkCheck if exit was requestedAoSource file path (if available)A`Source code lineBkSource span affected by this transformationBjStarting position delta from previous spanAeState after this stepkStep numberBhEnable strict POSIX mode (no extensions)AgImprovement suggestionsAiStart of containing tokenCkTotal lines in the script (excluding comments and empty \xe2\x80\xa6AiGet total number of linesAhTransformed code snippetAkUse existing bashrs_runtimeAoGet buffer utilization (% full)AlWhen to prefer this approachC`Create a new formatter with custom configurationAfSet impact descriptionBeNumber of transformations with proofsAnEnable tracing for this parserAlHuman-readable output formatBgAST annotated with semantic informationBlMinimal diff representation (not full clone)BcComprehensive quality audit resultsAdBash script executorC`Command substitution: $(cmd) or <code>cmd</code>AdCommand substitutionChDebug session for step-by-step execution of bash scriptsCkDefault value expansion: ${VAR:-default} If variable is \xe2\x80\xa6AdDetect $RANDOM usageClError if unset expansion: ${VAR:?message} If variable is \xe2\x80\xa6AhStructured error messageBgConfiguration for formatting operationsoA function callAgFeature is incompatibleBaInformation about a loaded scriptAdLoader configurationBbMetadata about the parsed MakefileAnOutput format for lint resultsBcSimple POSIX command representationAoQuality score for a bash scriptBlString literal: preserve internal whitespaceCkRemove prefix expansion: ${VAR#pattern} Remove shortest \xe2\x80\xa6CkRemove suffix expansion: ${VAR%pattern} Remove shortest \xe2\x80\xa6AmResult of replay verificationBfOutput format for purification reportsBj$SRANDOM (cryptographic random, Bash 5.1+)BiShared writer that wraps Arc&lt;Mutex&gt;BoShell dialect variants with version informationBkTarget shell dialect for generated scripts.CjString length expansion: ${#VAR} Get the length of the \xe2\x80\xa6CiTrace manager coordinates event collection across all \xe2\x80\xa6CkAppend-only log for transformation verification context \xe2\x80\xa6BhPattern for translating bash while loopsAmWrap pattern with $(sort \xe2\x80\xa6)BcAdd a contract to the current scopeBbAdd a function to loaded functionsBeAlternative approaches (REPL-013-003)CaCreate an annotated AST with semantic informationAgAuto-fix available flagAgBase timeout in secondsAbBash Quality ToolsBoBuild configuration based on complexity metricsBiCommand name from a restricted allow-listChGet the current line number (1-indexed for user display)AoCurrent line number (0-indexed)BdCONFIG-001: Deduplicate PATH entriesBoDisplay original and purified bash side-by-sideB`Get display name for the dialectAeEmit a simple commandAjGenerated POSIX shell codeBgExecute a command in the abstract stateAnExecute a single test functionAhExplain a bash constructAlFormat arithmetic expressionB`Format error message for displayAhGet mutable node at pathAfGet a session variableAdGet a variable valueCjCheck if Makefile has .ONESHELL directive (case-sensitive)CdCheck if line contains a pipeline (| outside quotes)CnCheck if line contains a subshell (standalone parentheses, \xe2\x80\xa6CjCheck if Makefile has .SUFFIXES directive (case-sensitive)AoCheck if there are any warningsClNumber of spaces per indentation level (default: 2, bash \xe2\x80\xa6CmCheck if input is already in canonical form (23% hit rate \xe2\x80\xa6AlCheck if path is a directoryCiCheck if position in line is inside quotes (double or \xe2\x80\xa6BoCheck if this effect set is a subset of anotherBcNumber of issues successfully fixedBfGet the highest severity level presentCiParse factor: \xe2\x80\x98(\xe2\x80\x99 expr \xe2\x80\x98)\xe2\x80\x99 | \xe2\x80\x98-\xe2\x80\x99 factor | \xe2\x80\xa6BaType of non-deterministic patternBfPre-condition state (before execution)BhPurification Transforms for Bash ScriptsAeIncrement error countCeNumber of replay runs to perform (default: 2, min: 2)lRequest exitCaResolve path (handle . and .., relative/absolute)AhSafety level of this fixAoScore a bash script for qualityBnHelper to get status emoji for dimension scoreAfSet a session variableAdSet a variable valueCiEscape a string for safe use in shell scripts (public \xe2\x80\xa6AaShell script fileAlGenerated POSIX shell scriptCjEvaluate the condition (if any) against provided variablesBjCalculate significance of this trace eventAfState before this stepBaTarget mutation score (0.0 - 1.0)AjRun tests in a bash scriptAjFormat as Rust test moduleBiGenerate Rust code for this property testAlConvert to Rust doctest codeAiConvert to Rust test codeAnConvert to Rust assertion codeBmGet total events recorded (including evicted)BiTotal events recorded (including evicted)BcTransform ID that created this spanBnVerify a Merkle proof against the current rootAeVerify a Merkle proofBdDetailed description of what changedBaAdd an example to the explanationkSet timeoutoWrite to stderroWrite to stdoutBkAbstract representation of the system stateCfAssign default value expansion: ${VAR:=default} If \xe2\x80\xa6CiStopped at a breakpoint on the specified line (1-indexed)CbWriter that captures output to an in-memory bufferBfFeature compatibility between dialectsBeTypes of non-deterministic constructsAlWorking directory comparisonBlDetect bashisms (non-POSIX shell constructs)BdDialect scoring system for inferenceAoTracks side effects of commandsB`Environment variables comparisonAeSingle execution stepCaFormally verified emitter for the tiny AST subsetAaGeneration eventsCbVariables that commonly should NOT be exported \xe2\x80\xa6BkIssue severity levels for semantic analysisCgConditional types in Makefiles Makefile conditional \xe2\x80\xa6Aemkdir without -p flagnNetwork accessBmCommon non-file targets that should be .PHONYAfQuality metrics reportCgQuote variables (SC2086) Applied LAST (lowest priority)AmMain formatter implementationClRemove useless constructs (SC2116: useless echo) Applied \xe2\x80\xa6BeTab completion helper for bashrs REPLBnSemantic changes introduced by transformationsB`Semantic issue found in MakefileB`Main test generator orchestratorAdIR generation errorsBaRepresents an uncovered code pathBcAll functions defined in the scriptBgAnnotated AST with semantic informationBfCheck if current line has a breakpointAbBackup file suffixAeClear command historyCnGet mode name completions (for <code>:mode &lt;tab&gt;</code>)BeLines that were executed during testsBhCreate backup file before applying fixesCnDetect non-deterministic $RANDOM or $(shell echo $$RANDOM) \xe2\x80\xa6B`Documentation score (0.0 - 10.0)AkEmit a sequence of commandsCbGet number of events evicted due to capacity limitBnNumber of events evicted due to capacity limitAgNumber of fixes appliedBmGet scoring weights appropriate for file typeAoFormat scan results for displayB`Format replay result for displayBfFormat verification result for displayBeFormat a bash script from source textAeFilesystem comparisonAcFunction signaturesBcGenerate text for a single MakeItemAiGet the current hit countBcInitial state used for verificationmInitial stateBeCheck if line starts a case statementBmCheck if this type is compatible with anotherBoCheck if two states are semantically equivalentBoCheck if script is idempotent (no issues found)BjWhether all runs produced identical outputChDetects if a bash input line is incomplete and needs \xe2\x80\xa6AkCheck if line starts a loopBeCheck if line is a .PHONY declarationBfCheck if delta is semantics-preservingAnCheck if coverage meets targetBeCheck if content is valid bash syntaxCiCheck if read command is part of while read (which is \xe2\x80\xa6CaGet events filtered by minimum significance levelCeLine-by-line coverage map (line number -&gt; covered)BjLint a Makefile and return all diagnosticsAkFresh type variable counterAjParse an include directiveAjParse time in millisecondsBfPost-condition state (after execution)ChList of prerequisites (targets or files this depends on)AfThe purified bash codeCaThe purified code (even though it has violations)BaPurify a shell configuration file0BfCalculate quality score for this errorBdCalculate quality score (0.0 to 1.0)AoScore a bash script for qualityChCheck if a file path should be ignored based on patternsAjCheck if two spans overlapBdStream output to JavaScript callbackCgCreate a new circular trace buffer with custom capacityCbCreate a trace manager with custom buffer capacitylSet severityBjWrite lint results in the specified formatBePattern for translating bash commandsAoRuntime options for compilationBhAnalysis result for a configuration fileAlResult of continue executionBlContract-based type system for shell scriptsBaCoverage report for a bash scriptBmExecute a simple command with fixed argumentsAlStep-by-step execution traceAdShell-specific typesChFix safety level (following APR research best practices)CgLine comparison result for purification-aware debuggingBiEnhanced error types for Makefile parsingCgPosition mapping result with token boundary informationChProof inspector for generating detailed verification \xe2\x80\xa6CnVerifies determinism by running scripts multiple times and \xe2\x80\xa6BbSeverity level for safety concernsBhScoring weights for different file typesBoSource location information for error reportingChStatistics about source map memory usage and performanceAhStdlib function metadataBiConfiguration options for test generationBcIndividual transformation log entryAoType of transformation to applyBkType constraint: variable has specific typeCeAbstract state representation for formal verificationBgAdd a span delta for compressed storageBbAnalyze a shell configuration file0CiAnalyze script to find all executable lines and functionsBaWhether the states are equivalentBfCalculate span for variable assignmentCmBLAKE3-256 for content addressing (measured 89% cache hit \xe2\x80\xa6AiCheck a specific contractAfCompare output streamsAjAny special considerationsAoCreate fix replacement with tabAlWorking directory comparisonAgGet DET violations onlyAgCount of DET violationsBcDiscover all tests in a bash scriptBlDetailed comparison of environment variablesBeExecute a bash script in WASM runtimeBfExecute bash script and capture outputBhExit requested flag (for clean shutdown)BgGet expected shell for this config typeBjExtract bounds from conditional statementsCiExtract subdirectory from make -C or \xe2\x80\x93directory commandAbGet function countBiGenerate a proof for a specific log entryBkGenerate a Merkle proof for a specific leafBlGenerate unit tests for all functions in ASTAhThe generated POSIX codeBgApply syntax highlighting to bash inputBjEnable character-by-character highlightingBoInternal node hashes for efficient verificationBhCheck if this breakpoint has a conditionAnCheck if line defines a targetCnCheck if line is a target definition (contains \xe2\x80\x98:\xe2\x80\x99 and \xe2\x80\xa6CnCheck if line is a target line (contains \xe2\x80\x98:\xe2\x80\x99 and not a \xe2\x80\xa60AbList all variablesAoMaximum test cases per propertyCjCONFIG-004: Detect and Remove Non-Deterministic ConstructsB`Type of non-idempotent operationChParse and evaluate arithmetic expression with proper \xe2\x80\xa6BcParse a Makefile string into an ASTAkParse a variable assignmentBcProperty Test Generation (Sprint 2)CiPurified version of the script lines (if purification \xe2\x80\xa6BeQuote a command argument if necessaryCbOperational semantics for the tiny rash AST subsetBoCalculate retention rate (% of events retained)AgGet SEC violations onlyAgCount of SEC violationsBdSemantic changes introduced (if any)BgCompute semantic delta for verificationBfSet a breakpoint at the specified lineCbSet a breakpoint at the specified line (1-indexed)CkSplit pipeline into individual commands (respecting quotes)B`Target pattern (e.g., \xe2\x80\x9c%.o\xe2\x80\x9d)AfTest Generation ModuleB`State transformation descriptionAbGet variable countAjGet the count of variablesC`Explanation of why this change improves the codeBcCreate a new conditional breakpointBaCreate a new hit-count breakpointAkSet maximum recursion depthCaCreate verifier with custom run count (minimum 2)CbRepresents an alias definition found in the sourceBaAssignment RHS: context-dependentA`Benchmark resultAlChange the current directoryBhTracks code coverage for generated testsBfCustom predicate with shell expressionAjDetect process ID $$ usageCbDetect non-deterministic timestamp ($(shell date))AlBash script execution resultA`Execution resultBbResult of executing a bash commandB`Entry in the abstract filesystemChResult of formatting operations with full provenance \xe2\x80\xa6BhConfiguration for bash script formattingBfPattern for translating bash functionsBiHardcoded paths that should use variablesCmQuote command substitutions (SC2046) Applied SECOND after \xe2\x80\xa6AmEmbedded Rash runtime libraryBkRange constraint: numeric variable in rangeBhPatterns that indicate hardcoded secretsBhCommands that should typically be silentBnDetailed safety rationale for a transformationCaPattern for translating bash variable assignmentsBdAnalyze source for alias definitionsBgCommon bash constructs for explain modeAgBash-to-Rash TranspilerBdCalculate branch coverage percentageBlCalculate grade based on score and file typeAjClear all loaded functionsAcClear all variables0AcGet coverage reportCfDetect non-deterministic $(wildcard) patterns in a \xe2\x80\xa6AjEmit a variable assignmentoErrors producedBfExecute a single command (or pipeline)BaExecute a bash command in a shellCkApply fixes with assumptions (requires \xe2\x80\x93fix, includes \xe2\x80\xa6BdGenerate mutation test configurationBdWhether to generate transform proofsCbWhether to generate SMT proofs for transformationsB`Generate a human-readable reportCaGenerate human-readable report of transformationsBoGenerate a target with prerequisites and recipeAoGet all breakpoint line numbersBbCheck if Makefile has .NOTPARALLELBnHighlight a single token with ANSI color codesAhGet IDEM violations onlyAhCount of IDEM violationsCeIgnore files matching these patterns (default: empty)AjCheck if line is a commentAmCheck if line ends a functionCiCheck if a ShellValue represents a string type (not a \xe2\x80\xa6BbMaintainability score (0.0 - 10.0)BnMakefile recipe preprocessing for bash lintingBlMaximum consecutive blank lines (default: 2)BeModified source code (if not dry-run)CaMutation Test Configuration Generation (Sprint 3)oOutput producedChCheck if a pattern matches a value (glob-style matching)BnOperational semantics for POSIX shell commandsAePrerequisite patternsBnPurify bash input and lint the purified outputCjPurify a Makefile AST by fixing non-deterministic patternsBmQuote all variable expansions (default: true)BfQuote all unquoted variables in sourceAiRemove a session variableAkReset the hit count to zeroBjReverse mapping from formatted to originalBoCreate self-extracting script instead of binaryAhSet total lines to trackBjCheck if target should be marked as .PHONYBkSuggest similar command using edit distanceBbTarget coverage percentage (0-100)CiTransform an AST by calling a function on each expressionAjGet uncovered line numbersAhGet uncovered code pathsCaCheck if function body uses arithmetic operationsAoCreate metadata with line countAbSet maximum memoryCiRestricted list of allowed commands for bootstrap scriptsCnAlternative value expansion: ${VAR:+alt_value} If variable \xe2\x80\xa6BlA single non-deterministic pattern detectionAaFilesystem changeBkA single non-idempotent operation detectionBdOutput format for inspection reportsBhOutput format for Makefile parse resultsAaOutput comparisonAkDifference between two runsAjPerformance issue detectedAhRemoved $RANDOM variableAmReplaced an argument at indexAdAll stdlib functionsBmSemantic metadata preserved during formattingCbBuilder for constructing source maps incrementallyAnOutput format for test resultsCiUnique identifier for transformations (for dependency \xe2\x80\xa6CcRepresents an unquoted variable found in the sourceBaActive contracts in current scopeAmAdd a character-level mappingBjAnalyze a Makefile AST for semantic issuesBaApply a single fix to source codeCjBuild diagnostic for variable assignment in shebang scriptBfBuild diagnostic for unquoted variableCcBuild diagnostic for invalid break/continue in caseBlBuild diagnostic for recipe line with spacesBlCategorize error and provide helpful contextBdChange the current working directoryCcGet command completions (for lines starting with :)AkGet complexity score (0-10)A`Container formatBcGet count of issues by pattern typeBfCreate a directory (mkdir -p behavior)CeCreate fix by adding include guard around entire fileBeEnable fast path for canonical inputsCfExecute a for loop Returns (end_line_index, exit_code)BfExecute a pipeline: cmd1 | cmd2 | cmd3CnExecute a subshell (isolated scope) Subshells create a new \xe2\x80\xa6A`Exit code changeCjExpand parameter expressions: arr[0], arr[@], #arr[@], \xe2\x80\xa6BfParse and expand variables in a stringBdExpand variables in a command stringChExtract variable name from export statement e.g., \xe2\x80\x9c\xe2\x80\xa6BaFind differences between two runsBfFormat a list of functions for displayBjFormat a single statement with indentationAbGenerate a commentAmGenerate an include directiveAeGet history file pathBiGrade thresholds for different file typesAeType inference engineCbCheck if script is deterministic (no issues found)BjWhether all runs produced identical outputBeCheck if quote at position is escapedBbCheck if a line is a function callBjCheck if position in line is inside quotesBnCheck if a position in a line is inside quotes0CfCheck if a name is a known shell builtin or common \xe2\x80\xa6CbCheck if a string is safe to use unquoted in shellAdGet loaded functionsBgFunctions extracted from loaded scriptsCfCheck if variable name looks like an array (heuristic)BfCheck if line is a variable assignmentBgParse a variable assignment from a lineAnParse targets from .PHONY lineBhDetailed safety rationale (REPL-013-002)C`Select mutation operators based on code patternsCiCheck if line should be skipped (comments or assignments)CdCheck if line should be skipped (comments or .PHONY)CkCheck if a line should be skipped (not a target definition)BeStrip ANSI escape codes from a stringBnCheck if this dialect supports a given featureBlToken boundaries for precise error reportingAoTotal number of transformationsBnValidate that a command is in the allowed listAkShellCheck validation levelBmSet line number where transformation occurredAoOutput format for audit resultsCfBreakpoint manager - manages collection of breakpointsBhCommands that should have error handlingBoContract condition expressed as logical formulaAbContract violationBfDetect missing set -e in shell scriptsBkFunction signature with pre/post conditionsBbResult of idempotency verificationClError returned when purified output fails zero-tolerance \xe2\x80\xa6BiRecommend .ONESHELL for multiline recipesCdRecommend adding .SUFFIXES: to disable builtin rulesBcReplaced timestamp with fixed valueAoOutput format for score resultsAoTrace event significance levelsBgGenerates unit tests for bash functionsCcLevel of verification applied during transpilation.AlIn-memory virtual filesystemAlVirtual filesystem interfaceBeContext-dependent whitespace handlingAhAdd attack vector closedAcAdd a range mappingAkAdd vulnerability preventedBiAnalyze a single statement for complexityCkApply fixes with assumptions (SAFE + SAFE-WITH-ASSUMPTIONS)BhInitialize with built-in shell functionsCaCalculate appropriate timeout based on complexityCdCheck a recipe line for echo/printf without @ prefixCeCalculate compression ratio compared to naive mappingAmCount diagnostics by severityBiFunctions that were executed during testsBmCreate diagnostic for subshell variable usageChDetect non-deterministic $(shell date) patterns in a \xe2\x80\xa6ChDetect non-deterministic $(shell find) patterns in a \xe2\x80\xa6ClExpand arithmetic expressions: $((expr)) -&gt; evaluated \xe2\x80\xa6BjExtract function names from AST statementsBhCreate error message for lint violationsClGenerate coverage report by analyzing script and running \xe2\x80\xa6AoGenerate doctests from commentsBdGenerate doctests from bash commentsAnGenerate a variable assignmentBbGet the current type of a variableCaCheck if a variable at position is already quotedBcCheck if variable is already quotedCeCheck if there\xe2\x80\x99s a breakpoint at the specified lineAoCheck if line starts a for loopAoCheck if line starts a functionAkGet all mappings in a rangeBfMaximum nesting depth before giving upAaOutput comparisonCjParse a conditional block starting at the given line indexCcParse a target line and extract target name and \xe2\x80\xa6CdParse a target rule starting at the given line indexAlWhether to preserve commentsAmRegister a function signatureBiRemove a breakpoint at the specified lineAaReset error countCkCheck if line should be analyzed (has backticks and quotes)CmCheck if line should be checked (has single brackets, not \xe2\x80\xa6CgCheck if Makefile should have an include guard (has \xe2\x80\xa6BbLinker flags for size optimizationAjSolve all type constraintsAoSet alternatives (REPL-013-003)BbSet number of replay runs (min: 2)BaOutput format for config commandsAhContainer format optionsCfDangerous commands that should never have unquoted \xe2\x80\xa6BcDangerous pattern rules (too broad)CbDetects non-deterministic patterns in bash scriptsAdExit code comparisonAmComplete generated test suiteCaDetects non-idempotent operations in bash scriptsCkCore formatter trait for pre-flight syntactic normalizationBnReport of purification transformations appliedAnResult of purification processBiResult of purifying and linting bash codeAfReplaced an expressionBnSuggest pattern rule instead of explicit rulesAnSystem calls that modify stateAiUnsupported Rust featuresClDetailed verification report containing all intermediate \xe2\x80\xa6BbResult of verifying a Merkle proofAkOverall verification resultAnAdd token boundary informationCbAnalyze code complexity to determine configurationAgApply type substitutionCaGet the string representation for constant valuesAbCompare exit codesCjGet file path completions (for :load and :source commands)CmContinue execution until a breakpoint is hit or execution \xe2\x80\xa6BeGet count of issues by operation typeChEvaluate a condition (handles both [ \xe2\x80\xa6 ] tests and \xe2\x80\xa6CdSimple condition evaluator for breakpoint conditionsChExecute a while loop Returns (end_line_index, exit_code)BgFind all .PHONY targets in the MakefileChFormat parse error for display in REPL with enhanced \xe2\x80\xa6BeCreate error message for parse errorsCbFormat replay verification differences for displayCaCheck if a recipe line already has error handlingChCheck if this effect set has any system modification \xe2\x80\xa6AeImpact if NOT appliedCiCheck if this significance level should be visible in \xe2\x80\xa6CnCheck if variable is in a special context where quoting is \xe2\x80\xa6BmCheck if a function name is a stdlib functionCdCheck if character at position is an unescaped quote3AfGet last loaded scriptBmLast loaded script path (for :reload command)BgCheck if performance meets requirementsAoGet human-readable memory usageChParse array access syntax: arr[index] -&gt; (arr, index)CeParse command line into words (simple space-based \xe2\x80\xa6CjParse a command line into words (simplified shell parsing)ChParse a define\xe2\x80\xa6endef block for multi-line variable \xe2\x80\xa6BaQuote variables in a command lineAkSet total branches to trackBfCheck if line should exit recipe stateC`Add space before function braces (default: true)CfEnforce strict idempotency (fail on non-idempotent \xe2\x80\xa6CiConvert to a displayable error message with note and helpAfTrack all side effectsBcValidate contracts in current scopeCcVerify that the IR represents idempotent operationsBiCircular trace buffer with fixed capacityBeDetect shared directory creation raceBjDetect race condition in shared file writeCfDetect shell-specific features (source, declare, etc.)BdDetect silent failures with @ prefixAmAnalysis of state equivalenceCmVerifies script idempotency by running multiple times and \xe2\x80\xa6BhConfidence scoring for dialect inferenceBlData structure for external log verificationCbMain normalization engine with zero-copy fast pathAnConfiguration for purificationCkRemove longest prefix expansion: ${VAR##pattern} Remove \xe2\x80\xa6CkRemove longest suffix expansion: ${VAR%%pattern} Remove \xe2\x80\xa6CfSAFE-WITH-ASSUMPTIONS: Semantic preservation under \xe2\x80\xa6BjDescription of how a state was transformedBmType inference engine with constraint solvingBfAnalyze equivalence between two statesCkAnalyze Makefile for portability issues (Sprint 83 - Day 7)AeApply fixes to a fileAoBenchmark streaming performanceCnCheck compatibility between source and target dialects for \xe2\x80\xa6AcCompare filesystemsChConsolidate duplicate aliases, keeping only the last \xe2\x80\xa6BbCalculate line coverage percentageBoGet count of critical violations (DET/IDEM/SEC)BiEscape a command name for shell executionBmEscape a string for safe use in shell scriptsBaEvaluate an arithmetic expressionCmExecute a brace group (shared scope) Brace groups execute \xe2\x80\xa6CkExecute a range of lines with control flow support (for \xe2\x80\xa6AnExplain redirection constructsAmExtract target name from lineBdExtract target name from target lineAoOperational failures eliminatedBaFind matching closing parenthesisCmFind matching closing parenthesis for pattern starting at \xe2\x80\xa6CaFind token boundary containing the given positionAoFormat alternatives for displayBgFormat lint results for display in REPLAoGenerate property tests for ASTBeGenerate unit tests for each functionAcHandle lint commandAcHandle load commandAmHandle mode switching commandAcHandle vars commandCgCheck if Makefile has .DELETE_ON_ERROR (case-sensitive)C`Check if this effect set has any network effectsCdIgnore duplicate commands in history (default: true)AiInfer type for a variableChCheck if line is empty or comment (stay in recipe state)BdCheck if line is an export statementClCheck if position in line is inside single quotes (where \xe2\x80\xa6CfCheck if variable is on the right side of == or != \xe2\x80\xa6CfCheck if variable should be skipped (special shell \xe2\x80\xa6ChKnown external variables that should suppress SC2154 \xe2\x80\xa6BnNumber of issues requiring manual interventionCgNormalize function syntax to name() { } (default: true)BiParse all .PHONY declarations from sourceCiParse a POSIX command string (simplified for our tiny \xe2\x80\xa6CgParse a single test function starting at the given lineDcPreprocess here documents (heredocs) Converts &lt;&lt;DELIMITER \xe2\x80\xa6CkWhether to preserve original whitespace in certain contextsAjPrint HTML coverage outputAjPrint JSON coverage outputAjPrint LCOV coverage outputAmNumber of property test casesCiPurify bash input and enforce zero-tolerance quality gateBhRebuild the Merkle tree from all entriesBmNumber of semantic-preserving transformationsCiSplit function arguments by commas, respecting nested \xe2\x80\xa6AnTokenize arithmetic expressionAlGet uncovered function namesCbUse [[ ]] instead of [ ] for tests (default: true)AkOverall verification resultCgCommon non-file targets that should be marked as .PHONYAmConfiguration analysis resultBbOutput format for coverage resultsBhDetect multiple targets with same outputBcJustification for emitter decisionsCfFile system constraint: path exists, is readable, etc.AeFilesystem comparisonBdInefficient shell patterns to detectBgRecommend adding .NOTPARALLEL directiveBkAnalyze PATH entries in shell script sourceBaCalculate complexity score (0-10)CmCalculate end column for variable span, including closing \xe2\x80\xa6BnCompare current line with its purified versionAmCompare environment variablesAlCount leading spaces in lineBjCreate regex pattern for alias definitionsAlGet the current line contentAgFinal states comparisonB`Escape a variable name for shellCkExecute an if statement Returns (end_line_index, exit_code)CnExecute a command for substitution (creates a new executor \xe2\x80\xa6AdExit code comparisonAoExplain control flow constructsCgExplain transformations that will be applied at the \xe2\x80\xa6CiExtract source files (.c, .cpp, .h, .rs, etc.) from a \xe2\x80\xa6ClExtract a variable reference starting at position (e.g., \xe2\x80\xa6CbFind the position of $ character before a variableBiCreate error message for unknown commandsAlGenerate a conditional blockBlGenerate loader code for embedding in binaryB`Generate improvement suggestionsAdHandle clear commandAdHandle parse commandCcIgnore commands starting with space (default: true)BjCheck if line contains a dangerous patternCgCheck if variable is internal (shouldn\xe2\x80\x99t be exported)BmCheck if line is a local variable declarationAoCheck if a command name is safeCbCalculate Levenshtein distance between two stringsBbCreate a SAFE-WITH-ASSUMPTIONS fixCaParse array elements from string, handling quotesCgPlan which transformations to apply for detected issuesBmPreserve existing blank lines (default: true)BaConvert to proptest strategy codeBaTrace rash execution step by stepBkRecursive helper for tracing rash executionBkCheck if function body uses file operationsClVerify that the IR is deterministic (same inputs produce \xe2\x80\xa6AnDetect non-portable echo usageC`Patterns that indicate shared state modificationAlApply transformations to ASTAeAttack vectors closedCmDetect non-deterministic constructs and create CONFIG-004 \xe2\x80\xa6ChEvaluate test command: [ condition ] Returns true if \xe2\x80\xa6AgExecute a function callBmExtract doctests from a function\xe2\x80\x99s commentsCbExtract function body (everything between { and })BjExtract function name from definition lineCdExtract the path being added from a PATH export lineCkExtract prerequisites part from target line (everything \xe2\x80\xa6ChExtract TEST, GIVEN, WHEN, THEN comments before functionCaExtract variable name from semantic issue messageBnFind if the recipe contains a critical commandBjFormat source context with caret indicatorBgGenerate bounds checking property testsCiGenerate tests for branch coverage (if/else, case, loops)AgGenerate a pattern ruleAeHandle purify commandAeHandle reload commandAeHandle source commandBhCheck if line contains break or continueCnCheck if Makefile has any multi-line recipes (targets with \xe2\x80\xa6D`Check if a variable is an automatic variable ($@, $&lt;, $^, \xe2\x80\xa6CcCheck if a variable is already quoted at a positionCjCheck if line is a recipe line that starts with spaces \xe2\x80\xa6BbCalculate line coverage percentageBcQuote the RHS of an assignment lineCdRemove longest prefix matching pattern (simple glob)CdRemove longest suffix matching pattern (simple glob)BoRemove non-deterministic constructs from sourceCmCheck if this breakpoint should trigger, incrementing hit \xe2\x80\xa6AmTarget mutation score (0-100)BbTrace POSIX execution step by stepBcSet safety rationale (REPL-013-002)BaDetect non-portable command flagsBaDetect platform-specific commandsBbTypes of non-idempotent operationsAjRecommend .DELETE_ON_ERRORAkSet an environment variableCbSuggest using := instead of = for simple variablesBmSuggest SOURCE_DATE_EPOCH for reproducibilityCfCategory of transformation applied during purificationCkAnalyze Makefile for error handling issues (Sprint 83 - \xe2\x80\xa6BoAnalyze source for non-deterministic constructsBcBuild diagnostic for missing .PHONYBaCalculate safety score (0.0-10.0)BhCompute state transformation descriptionCdDetect if a string contains a GNU Make function callBjGenerate issues for duplicate PATH entriesCgDetect transformation patterns between original and \xe2\x80\xa6AfEmitter justificationsAhExecute a case statementBdExtract function calls from a stringBoHandle command processing based on current modeAfHandle history commandCdCheck if this effect set has any file system effectsCkCheck if a target name is a common non-file target that \xe2\x80\xa6BhCheck if a line is a function definitionBmCheck if transformation can be applied safelyBfCheck if transform preserves semanticsBfCheck if line is a variable assignmentBhCheck if a line is a variable assignmentC`Parse array element assignment: arr[index]=valueBnParse a single item within a conditional blockBfPreprocess Makefile source for lintingAoPreprocess a single recipe lineCeRemove shortest prefix matching pattern (simple glob)CeRemove shortest suffix matching pattern (simple glob)AfSet last loaded scriptChCheck if a variable name should suppress SC2154 warningsChAlternative suggested fixes (for Unsafe - human must \xe2\x80\xa6CaValidate a variable name according to POSIX rulesCdVerify that the IR doesn\xe2\x80\x99t use excessive resourcesBfWrap specific pattern with $(sort \xe2\x80\xa6)CkDangerous commands that should never be run with sudo + \xe2\x80\xa6AiDetect missing dependencyCiDetect multiple sequential recipe lines that could be \xe2\x80\xa6BcTypes of non-deterministic patternsBePatterns that indicate recursive makeBnConvert $VAR to ${VAR} (add braces if missing)ChAnalyze the effects of a shell command based on its nameCgAnalyze Makefile for parallel safety issues (Sprint 83)BiCalculate optimal number of parallel jobsBbCalculate testing score (0.0-10.0)CaGet bash construct completions (for explain mode)CaSimple zstd decompression for no_std environmentsBjEstimate size reduction from optimizationsBeExtract examples from inline commentsCaFind targets with overlapping shared state writesChFind all unquoted variables in prerequisites Returns \xe2\x80\xa6BcFormat safety rationale for displayAmGenerate boundary value testsBfGenerate tests for a specific functionBfGenerate property tests using proptestCdGenerate targeted tests for specific uncovered pathsCaGet the shell function name for a stdlib functionBgCheck if line is a readonly declarationCiCheck if variable usage is on same line as assignment \xe2\x80\xa6CkCheck if line is a single-line for loop (for x in y; do \xe2\x80\xa6AmWrite mutation config to fileBdParse array declaration: arr=(a b c)AgPrint JSON test resultsAnPrint terminal coverage outputBdCompiler flags for size optimizationBaNumber of transformations appliedCbWrap pattern in specific variable with $(sort \xe2\x80\xa6)BhRecommend adding order-only prerequisiteCmConvert a statement in a function context (handles return \xe2\x80\xa6ChDeduplicate PATH entries in source, preserving first \xe2\x80\xa6BbDetect duplicate alias definitionsCfEscape special characters for use within double quotesBdExport log for external verificationBnFormat diff highlighting for a line comparisonCjGenerate edge case tests (empty strings, null, max values)BdGenerate mutation test configurationAhHandle functions commandCjCheck if variable is in arithmetic context (inside $(( )))BiCheck if this fix can be applied with \xe2\x80\xa6BaPrint human-readable test resultsAhPrint JSON audit resultsAhPrint JSON score resultsAlPrint JUnit XML test resultsBeRemove all non-deterministic elementsChRepresents a non-deterministic construct found in configBoDetailed explanation of a single transformationBiCheck if a target is missing dependenciesBfDetect performance issues (CONFIG-005)CaGenerate CONFIG-002 issues for unquoted variablesAoEvaluate a single POSIX commandCdFind dependencies that are missing from declared \xe2\x80\xa6BlFind subshell variable assignments on a lineBkFormat idempotency scan results for displayBfCalculate function coverage percentageCjGenerate a minimal Dockerfile for building static binariesCeGenerate default examples based on function structureCkGenerate determinism property test (same input \xe2\x86\x92 same \xe2\x80\xa6AiGenerate error case testsCdGenerate idempotency property test (f(f(x)) == f(x))CdGenerate safety rationale for safety transformationsBkCheck if function is potentially idempotentCnCheck if a string is a valid POSIX shell identifier (ASCII \xe2\x80\xa6BhParse a function definition and store itBbPrint human-readable audit resultsBbPrint human-readable score resultsCgPrint SARIF audit results (GitHub Code Scanning format)BbSecurity vulnerabilities preventedBhDetect missing error handling in recipesBoAnalyze source for unquoted variable expansionsBeCalculate complexity score (0.0-10.0)BfFormat purification report for displayBhGenerate a purified Makefile from an ASTCnAnalyze Makefile for reproducible builds issues (Sprint 83 \xe2\x80\xa6BfCollect source files from recipe linesCjPattern to match unquoted variable expansions Matches: \xe2\x80\xa6CkExpand variables in arithmetic context (no $ prefix needed)BfExplain parameter expansion constructsBfFind token boundary in reverse mappingBoFormat purified lint result for display in REPLBkGenerate tests until coverage target is metCkCheck if read is between do and done in single-line for \xe2\x80\xa6BlScore a bash script with file type detectionCdVerify that the IR contains no command injection \xe2\x80\xa6BmTheorem: Semantic equivalence of emitted codeCiExpand command substitutions: $(cmd) -&gt; command outputBhExplain what changed during purificationC`Format a detailed transformation report from \xe2\x80\xa6C`Generate alternatives for safety transformationsBjMark lines in covered functions as coveredAlPrint Markdown score resultsCbCreate a new hit-count breakpoint with a conditionClDetect non-deterministic command (hostname, git, mktemp, \xe2\x80\xa6BhCalculate documentation score (0.0-10.0)BfCreate diagnostic for read in for loopBeCreate a self-extracting shell scriptBdFormat diff output with explanationsCfPreprocess Makefile input to handle line continuationsBfDetect missing error handling in loopsBgRecommend handling recursive make callsBlSuggest combining multiple shell invocationsBlCreate a diagnostic for missing dependenciesCcFormat lint violations with source code context \xe2\x80\xa6CiGenerate safety rationale for determinism transformationsCiGenerate safety rationale for idempotency transformationsCjInfer proptest generators from function signature and bodyCcCalculate cyclomatic complexity for a function bodyBjCalculate maintainability score (0.0-10.0)CbCreate diagnostic for array used as scalar in testAoGenerate emitter justificationsBhGenerate type preservation property testCbCheck if function has non-deterministic operationsClMark functions that are called at the top level (outside \xe2\x80\xa6CaAnalyze Makefile for performance optimization \xe2\x80\xa6CmCheck line for dangerous pattern and create diagnostic if \xe2\x80\xa6CbCreate diagnostic for unescaped quote in backticksClCheck if variable usage has array subscript or is length \xe2\x80\xa6BjCollect targets that write to shared stateChFind unescaped quote position inside backtick expressionCeGenerate alternatives for determinism transformationsCeGenerate alternatives for idempotency transformationsBnRecursive helper for generating justificationsCjExplain what changed during purification with detailed \xe2\x80\xa6ChFormat purified lint result with source code context \xe2\x80\xa6")