name: Automated Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        options: [patch, minor, major]
        required: true
        description: 'Release type'

jobs:
  prepare-release:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.new }}
      changelog: ${{ steps.changelog.outputs.content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Calculate version
        id: version
        run: |
          CURRENT=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          IFS='.' read -r major minor patch <<< "$CURRENT"
          
          case "${{ inputs.release-type }}" in
            major) ((major++)); minor=0; patch=0 ;;
            minor) ((minor++)); patch=0 ;;
            patch) ((patch++)) ;;
          esac
          
          NEW_VERSION="$major.$minor.$patch"
          echo "new=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "New version will be: $NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "## Changes in v${{ steps.version.outputs.new }}" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            git log --pretty=format:"- %s" >> CHANGELOG_NEW.md
          else
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s" >> CHANGELOG_NEW.md
          fi
          
          echo "content<<EOF" >> "$GITHUB_OUTPUT"
          cat CHANGELOG_NEW.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Update version files
        run: |
          # Update all Cargo.toml files
          find . -name Cargo.toml -exec sed -i \
            "s/^version = \".*\"/version = \"${{ steps.version.outputs.new }}\"/" {} \;
          
          # Update dependencies versions in workspace
          sed -i "s/^rash = { version = \".*\"/rash = { version = \"${{ steps.version.outputs.new }}\"/" \
            rash-runtime/Cargo.toml rash-tests/Cargo.toml || true
          sed -i "s/^rash-runtime = { version = \".*\"/rash-runtime = { version = \"${{ steps.version.outputs.new }}\"/" \
            rash/Cargo.toml rash-tests/Cargo.toml || true
          
          # Update Cargo.lock
          cargo update --workspace

      - name: Run release validation
        run: |
          make validate
          make verify-specs
          make test-determinism

      - name: Commit and tag
        run: |
          git config user.name "RASH Release Bot"
          git config user.email "rash-bot@example.com"
          
          git add -A
          git commit -m "chore: release v${{ steps.version.outputs.new }}"
          git tag -a "v${{ steps.version.outputs.new }}" \
            -m "Release v${{ steps.version.outputs.new }}"
          
          git push origin main
          git push origin "v${{ steps.version.outputs.new }}"

  build-release:
    needs: prepare-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
            cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
            cross: true
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-13
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.version }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Install cross
        if: matrix.cross
        run: cargo install cross

      - name: Build release binary
        run: |
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Create artifact
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            7z a rash-${{ matrix.target }}.zip rash.exe
          else
            tar czf rash-${{ matrix.target }}.tar.gz rash
          fi
          sha256sum rash-${{ matrix.target }}.* > checksums.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rash-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/rash-${{ matrix.target }}.*

  publish-release:
    needs: [prepare-release, build-release]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.version }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release notes
        run: |
          echo "# RASH v${{ needs.prepare-release.outputs.version }}" > RELEASE.md
          echo "" >> RELEASE.md
          echo "${{ needs.prepare-release.outputs.changelog }}" >> RELEASE.md
          echo "" >> RELEASE.md
          echo "## Installation" >> RELEASE.md
          echo "" >> RELEASE.md
          echo "### Using the installer script:" >> RELEASE.md
          echo '```bash' >> RELEASE.md
          echo 'curl -sSfL https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare-release.outputs.version }}/install-rash.rs | rustc - && ./install-rash' >> RELEASE.md
          echo '```' >> RELEASE.md
          echo "" >> RELEASE.md
          echo "### Manual installation:" >> RELEASE.md
          echo "Download the appropriate binary for your platform from the assets below." >> RELEASE.md

      - name: Create checksums file
        run: |
          cd artifacts
          find . -name "checksums.txt" -exec cat {} \; > ../checksums-all.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: RASH v${{ needs.prepare-release.outputs.version }}
          body_path: RELEASE.md
          draft: false
          prerelease: false
          files: |
            artifacts/*/*
            checksums-all.txt
            install-rash.rs

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          cd rash-runtime && cargo publish --no-verify || echo "rash-runtime already published"
          cd ../rash && cargo publish --no-verify || echo "rash already published"