name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --all-features --workspace
    
    - name: Run integration tests
      run: cargo test --test integration_tests
    
    - name: Run doc tests
      run: cargo test --doc

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run benchmarks
      run: cargo bench --workspace
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release
      run: cargo build --release --workspace
    
    - name: Test release build
      run: ./target/release/rash --version
      shell: bash
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: rash-${{ matrix.os }}
        path: target/release/rash*

  shell-compatibility:
    name: Shell Compatibility Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shell: [sh, bash, dash, ash]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install shells
      run: |
        sudo apt-get update
        sudo apt-get install -y dash busybox-static
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build rash
      run: cargo build --release
    
    - name: Generate test script
      run: |
        ./target/release/rash build examples/debug.rs --output test-${{ matrix.shell }}.sh
    
    - name: Test with ${{ matrix.shell }}
      run: |
        ${{ matrix.shell }} test-${{ matrix.shell }}.sh

  shellcheck-validation:
    name: ShellCheck Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build rash
      run: cargo build --release --workspace
    
    - name: Run ShellCheck validation
      run: make shellcheck-validate
    
    - name: Run ShellCheck integration tests
      run: cargo test --test shellcheck_validation
    
    - name: Upload ShellCheck results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: shellcheck-results
        path: |
          tests/shellcheck-output/
          *.log

  quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install PAIML toolkit
      run: |
        # This would typically install from release
        # For now, assuming it's available
        echo "PAIML toolkit analysis would run here"
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build project
      run: cargo build --workspace
    
    - name: Run complexity analysis
      run: |
        # paiml-mcp-agent-toolkit analyze complexity --project-path .
        echo "Complexity analysis placeholder"
    
    - name: Generate dependency graph
      run: |
        # paiml-mcp-agent-toolkit analyze dag --project-path .
        echo "Dependency analysis placeholder"

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build documentation
      run: cargo doc --all-features --workspace --no-deps
    
    - name: Check documentation
      run: cargo doc --all-features --workspace --no-deps --document-private-items
    
    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc