searchState.loadedDescShard("rash", 0, "Check if the given Rust code is valid for transpilation\nFormal verification module for the rash emitter\nPre-flight Formatter Implementation\nTranspile Rust source code to POSIX shell script\nValidate that an AST conforms to Rash restrictions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform an AST by calling a function on each expression\nWalk an AST and call the visitor for each node\nTranspile Rust source to shell script\nBusybox (900KB)\nCheck Rust source for Rash compatibility\nCompile to standalone binary\nRuntime options for compilation\nContainer format options\nDash shell (180KB)\nDocker format\nHTML report\nInitialize new Rash project\nGenerate formal verification inspection report\nOutput format for inspection reports\nJSON report\nMarkdown report\nMinimal interpreter (50KB)\nOCI format\nLaunch interactive playground REPL\nVerify shell script matches Rust source\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable strict mode (fail on warnings)\nTarget shell dialect\nShellCheck-compatible validation level\nEnable verbose output\nVerification stringency level\nBuild distroless container\nContainer format\nInclude detailed traces\nEmit verification proof\nInitial file to load\nOutput format\nInput Rust file\nInput Rust file\nInput AST file (JSON) or inline AST specification\nProject name\nDisable optimizations\nDisable VI-style key bindings\nOutput shell script file\nOutput file (defaults to stdout)\nOutput binary path\nProject directory\nSession state URL to restore\nRuntime type\nRust source file\nInput Rust source file\nCreate self-extracting script instead of binary\nShell script file\nCreate a self-extracting shell script\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimal runtime loader for embedded scripts This module …\nELF structures for parsing\nLoader configuration\nSimple zstd decompression for no_std environments\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate loader code for embedding in binary\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEstimate size reduction from optimizations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLinker flags for size optimization\nCompiler flags for size optimization\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a minimal Dockerfile for building static binaries\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmit shell code from IR based on target dialect\nEscape a command name for shell execution\nEscape a string for safe use in shell scripts\nEscape a variable name for shell\nCheck if a command name is safe\nCheck if a string is safe to use unquoted in shell\nCheck if a string is a valid shell identifier\nEscape a string for safe use in shell scripts (public …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAbstract state representation for formal verification\nFormal emitter for the tiny AST subset\nProof inspection and intermediate artifact generation\nOperational semantics for rash AST and POSIX shell\nTiny subset of rash AST for formal verification\nAbstract representation of the system state\nDirectory\nText file with content\nEntry in the abstract filesystem\nChange the current working directory\nCreate a directory (mkdir -p behavior)\nCurrent working directory\nEnvironment variables (name -&gt; value mapping)\nExit code of the last command\nAbstract filesystem representation (path -&gt; content) For …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an environment variable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if two states are semantically equivalent\nCreate a new abstract state with basic initialization\nSet an environment variable\nStandard error buffer\nStandard output buffer\nCreate a test state with common setup\nWrite to stderr\nWrite to stdout\nFormally verified emitter for the tiny AST subset\nEmit POSIX shell code from a tiny AST node\nEmit a variable assignment\nEmit a change directory command\nEmit a simple command\nEmit a sequence of commands\nEscape special characters for use within double quotes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuote a command argument if necessary\nQuote a value for assignment\nTheorem: Semantic equivalence of emitted code\nAST annotated with semantic information\nWorking directory change\nWorking directory comparison\nJustification for emitter decisions\nEnvironment variable change\nEnvironment variables comparison\nAnalysis of state equivalence\nSingle execution step\nStep-by-step execution trace\nExit code comparison\nFilesystem change\nFilesystem comparison\nOutput comparison\nProof inspector for generating detailed verification …\nDescription of how a state was transformed\nDetailed verification report containing all intermediate …\nOverall verification result\nAnalyze equivalence between two states\nCreate an annotated AST with semantic information\nAnnotated AST with semantic information\nWhether the states are equivalent\nThe original AST being verified\nThe AST node being emitted\nChild annotations for composite nodes\nCompare working directories\nCompare environment variables\nCompare exit codes\nCompare filesystems\nCompare output streams\nCompute state transformation description\nAny special considerations\nWorking directory change\nWorking directory comparison\nGenerated POSIX shell code\nEmitter justifications\nEnvironment variable changes\nDetailed comparison of environment variables\nFinal states comparison\nAny errors that occurred\nErrors produced\nExit code change\nExit code comparison\nFinal state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFilesystem changes\nFilesystem comparison\nGenerate emitter justifications\nRecursive helper for generating justifications\nGenerate a human-readable report\nThe generated POSIX code\nInitial state used for verification\nInitial state\nGenerate a comprehensive verification report\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe AST node\nDescription of the operation\nOutput comparison\nOutput produced\nStep-by-step execution trace for POSIX semantics\nPost-condition state (after execution)\nPre-condition state (before execution)\nStep-by-step execution trace for rash semantics\nReasoning for the generation\nState after this step\nState before this step\nStep number\nExecution steps\nTrace POSIX execution step by step\nTrace rash execution step by step\nRecursive helper for tracing rash execution\nState transformation description\nOverall verification result\nContains the error value\nResult of evaluating an AST node or shell command\nContains the success value\nOperational semantics for POSIX shell commands\nOperational semantics for the tiny rash AST subset\nSimple POSIX command representation\nEvaluate a POSIX shell command string in a given state\nEvaluate a single POSIX command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a command line into words (simplified shell parsing)\nParse a POSIX command string (simplified for our tiny …\nExecute a command in the abstract state\nEvaluate a rash AST node in a given state\nRestricted list of allowed commands for bootstrap scripts\nChange the current directory\nExecute a simple command with fixed arguments\nSequential execution of commands\nSet an environment variable\nThe tiny subset of rash AST nodes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the AST node is valid\nValidate that a command is in the allowed list\nValidate a variable name according to POSIX rules\nList of literal string arguments\nCommand name from a restricted allow-list\nList of commands to execute in order\nVariable name (valid POSIX variable name)\nAbsolute or simple relative path\nLiteral string value\nCore formatter trait for pre-flight syntactic normalization\nMain formatter implementation\nContract system for shell-specific type inference and …\nShell dialect detection and compatibility system\nNormalization engine for syntax transformation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransform logging with Merkle tree for integrity …\nSource mapping with character-level precision\nTransform algebra and normalization operations\nCore type definitions for the formatter\nLogical operators\nContract specification\nContract condition expressed as logical formula\nContract-based type system for shell scripts\nContract violation\nCustom predicate with shell expression\nFile system constraint: path exists, is readable, etc.\nFunction signature with pre/post conditions\nNon-null constraint: variable is defined\nRange constraint: numeric variable in range\nType constraint: variable has specific type\nContext for type inference\nType error information\nType inference engine with constraint solving\nActive contracts in current scope\nAdd a contract to the current scope\nApply type substitution\nInitialize with built-in shell functions\nCheck a specific contract\nType constraints to solve\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction signatures\nGet the current type of a variable\nInfer type for a variable\nType inference engine\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFresh type variable counter\nRegister a function signature\nSolve all type constraints\nType environment for variables\nUnification algorithm for type inference\nValidate contracts in current scope\nFeature compatibility between dialects\nCore shell dialects for scoring (excludes Inferred variant)\nDialect scoring system for inference\nFeature is directly compatible\nFeature is incompatible\nConfidence scoring for dialect inference\nShell dialect variants with version information\nCheck compatibility between source and target dialects for …\nGet display name for the dialect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInfer dialect with confidence scoring\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this dialect supports a given feature\nMain normalization engine with zero-copy fast path\nConfiguration options\nEnable fast path for canonical inputs\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to generate transform proofs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if input is already in canonical form (23% hit rate …\nMaximum nesting depth before giving up\nMain normalization with full tracking\nWhether to preserve comments\nActive whitespace context stack\nMetadata about the transformation log\nStatistics about the transformation log\nData structure for external log verification\nMerkle proof for verifying log entry integrity\nMerkle tree for log integrity verification\nIndividual transformation log entry\nAppend-only log for transformation verification context …\nResult of verifying a Merkle proof\nAdd a new transformation entry\nLog creation timestamp\nDirection indicators (true = right, false = left)\nCreate an empty Merkle tree\nAll transformation entries\nExport log for external verification\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate Merkle tree from leaf hashes\nGenerate a proof for a specific log entry\nGenerate a Merkle proof for a specific leaf\nHash a single transform entry\nTree height (log2 of leaf count, rounded up)\nUnique identifier for this transformation\nInternal node hashes for efficient verification\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll leaf hashes (one per log entry)\nIndex of the leaf being verified\nMerkle tree for integrity verification\nLog metadata\nCreate a new empty transform log\nHash path from leaf to root\nOptional SMT proof for semantic preservation\nRebuild the Merkle tree from all entries\nResulting span after transformation\nGet the current root hash for integrity checking\nRoot hash of the tree\nSemantic changes introduced (if any)\nNumber of semantic-preserving transformations\nSource span affected by this transformation\nGet statistics about the log\nTime span of all transformations\nTimestamp when transformation was applied\nTotal number of transformations\nThe transformation that was applied\nVerify a Merkle proof against the current root\nVerify a Merkle proof\nNumber of transformations with proofs\nB+ tree for O(log n) point queries, O(k + log n) range …\nCharacter-level bidirectional source mapping\nBuilder for constructing source maps incrementally\nStatistics about source map memory usage and performance\nCompressed span deltas for memory efficiency\nAdd a character-level mapping\nAdd a mapping between original and formatted positions\nAdd a range mapping\nAdd a span delta for compressed storage\nAdd token boundary\nAdd token boundary information\nBuild the final source map\nCalculate compression ratio compared to naive mapping\nCompressed span deltas for memory efficiency\nFind token boundary containing the given position\nFind token boundary in reverse mapping\nB+ tree for forward mapping (original -&gt; formatted)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate identity mapping for unchanged source\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLength of the span\nGet all mappings in a range\nGet human-readable memory usage\nCreate a new source map\nCharacter-level precision with token boundary awareness\nReverse mapping from formatted to original\nB+ tree for reverse mapping (formatted -&gt; original)\nStarting position delta from previous span\nGet statistics about the mapping\nToken boundaries for precise error reporting\nTransform ID that created this span\nArithmetic expression: remove all whitespace\nAssignment RHS: context-dependent\nCase pattern: preserve for alignment\nNormal command context: collapse to single space\nHere-document: preserve exactly\nInterval set for tracking preserved ranges\nString literal: preserve internal whitespace\nSemantic changes introduced by transformations\nSMT proof representation (simplified)\nTransformations form a monoid under composition\nUnique identifier for transforms\nContext-dependent whitespace handling\nMonoid composition with optimization\nCompose semantic deltas (associative operation)\nGet human-readable description\nGet human-readable description\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if delta is semantics-preserving\nCheck if transform preserves semantics\nCompute semantic delta for verification\nPreserved byte ranges (e.g., string literals)\nSMT formula asserting equivalence\nCompound types\nByte position in source text\nCharacter position in source text\nShell-specific types\nConfiguration for formatting operations\nResult of formatting operations with full provenance …\nPosition mapping result with token boundary information\nSemantic metadata preserved during formatting\nShell-specific type system for contracts\nSource span with start and end positions\nPrimitive types\nType variables for inference\nUnion types for shell’s dynamic nature\nBLAKE3-256 for content addressing (measured 89% cache hit …\nComments and their positions\nDetected contracts/specifications\nGet a human-readable representation\nWhether to enable SIMD optimizations\nExact character position\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction definitions\nWhether to generate SMT proofs for transformations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this type is compatible with another\nMaximum number of threads to use\nSemantic annotations preserved across transforms\nEnable parallel processing for large files\nWhether to preserve original whitespace in certain contexts\nCharacter-level bidirectional mapping with interval trees\nUTF-8 normalized text, zero-copy when possible\nEnd of containing token\nStart of containing token\nAppend-only log for verification context propagation\nVariable declarations and usage\nReturns the argument unchanged.\nConvert AST to Shell IR\nCalls <code>U::from(self)</code>.\nOptimize Shell IR based on configuration\nReading environment variables\nReading from files\nWriting to files\nNetwork access\nProcess execution\nPure computation (no side effects)\nSystem calls that modify state\nAdd an effect to this set\nAnalyze the effects of a shell command based on its name\nCheck if this effect set contains a specific effect\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if this effect set has any file system effects\nCheck if this effect set has any network effects\nCheck if this effect set has any system modification …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this effect set is pure\nCheck if this effect set is a subset of another\nCreate a pure effect set (no side effects)\nCreate an effect set with a single effect\nGet all effects as a vector\nUnion two effect sets\nBoolean value (converted to “true”/“false”)\nCommand substitution\nConcatenated values\nCommand execution\nExit with code\nConditional execution\nVariable assignment: readonly NAME=VALUE\nNo-op\nSequence of operations\nString literal\nVariable reference\nGet the string representation for constant values\nGet all effects from this IR node and its children\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this value is a constant (doesn’t depend on …\nCheck if this IR node is pure (has no side effects)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLock-free incremental computation graph\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDocument management with CRDT-like properties\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nModal editing states for VI-style interface\nKeymap engine with trie-based matching and timeout support\nTrie node for efficient keymap matching\nThe key itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKind of event.\nAdditional key modifiers.\nKeyboard state.\nSIMD-accelerated syntax highlighter\nClear the token cache\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHighlight a line using SIMD-accelerated token …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidate cache for specific lines\nSIMD-accelerated utilities for token classification\nCheck if a byte slice contains only ASCII alphanumeric …\nTree-sitter based incremental parser for Rust code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if we should do a full reparse based on edit distance\nBuffer for differential rendering\nZero-copy rendering pipeline with differential updates\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimal state for URL encoding\nSession state for persistence and sharing\nCustom serde for compressed history\nCursor position\nDocument content\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRestore from URL-encoded string\nCompressed history for undo/redo\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLayout configuration\nLoad session from file\nCustom serde implementation for Rope\nSave session to file\nSession metrics\nConvert to URL-encoded string for sharing\nTranspiler configuration\nCore playground system implementing reactive architecture\nLock-free incremental computation graph\nDocument management with CRDT-like properties\nCurrent editor mode and keymap\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad content into the playground\nCreate a new playground system\nZero-copy rendering pipeline\nRestore session from URL-encoded state\nRun the playground main loop\nSession metrics\nVI-style editing enabled\nAdaptive debouncer for transpilation requests\nStructured concurrency token for cancellation\nCancellable transpilation controller for playground\nPerformance metrics for transpilation\nTranspilation output with diagnostics and metrics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTranspile source with cancellation support\nParse Rust source code into a RestrictedAst\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify that the given IR satisfies safety properties\nVerify that the IR is deterministic (same inputs produce …\nVerify that the IR represents idempotent operations\nVerify that the IR contains no command injection …\nVerify that the IR doesn’t use excessive resources")